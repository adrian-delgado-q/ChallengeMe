
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ChallengeParticipant` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ChallengeParticipant
 * 
 */
export type ChallengeParticipantModel = runtime.Types.Result.DefaultSelection<Prisma.$ChallengeParticipantPayload>

export type AggregateChallengeParticipant = {
  _count: ChallengeParticipantCountAggregateOutputType | null
  _min: ChallengeParticipantMinAggregateOutputType | null
  _max: ChallengeParticipantMaxAggregateOutputType | null
}

export type ChallengeParticipantMinAggregateOutputType = {
  id: string | null
  challengeId: string | null
  userId: string | null
  teamId: string | null
  joinedAt: Date | null
}

export type ChallengeParticipantMaxAggregateOutputType = {
  id: string | null
  challengeId: string | null
  userId: string | null
  teamId: string | null
  joinedAt: Date | null
}

export type ChallengeParticipantCountAggregateOutputType = {
  id: number
  challengeId: number
  userId: number
  teamId: number
  joinedAt: number
  _all: number
}


export type ChallengeParticipantMinAggregateInputType = {
  id?: true
  challengeId?: true
  userId?: true
  teamId?: true
  joinedAt?: true
}

export type ChallengeParticipantMaxAggregateInputType = {
  id?: true
  challengeId?: true
  userId?: true
  teamId?: true
  joinedAt?: true
}

export type ChallengeParticipantCountAggregateInputType = {
  id?: true
  challengeId?: true
  userId?: true
  teamId?: true
  joinedAt?: true
  _all?: true
}

export type ChallengeParticipantAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ChallengeParticipant to aggregate.
   */
  where?: Prisma.ChallengeParticipantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChallengeParticipants to fetch.
   */
  orderBy?: Prisma.ChallengeParticipantOrderByWithRelationInput | Prisma.ChallengeParticipantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ChallengeParticipantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChallengeParticipants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChallengeParticipants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ChallengeParticipants
  **/
  _count?: true | ChallengeParticipantCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ChallengeParticipantMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ChallengeParticipantMaxAggregateInputType
}

export type GetChallengeParticipantAggregateType<T extends ChallengeParticipantAggregateArgs> = {
      [P in keyof T & keyof AggregateChallengeParticipant]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateChallengeParticipant[P]>
    : Prisma.GetScalarType<T[P], AggregateChallengeParticipant[P]>
}




export type ChallengeParticipantGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ChallengeParticipantWhereInput
  orderBy?: Prisma.ChallengeParticipantOrderByWithAggregationInput | Prisma.ChallengeParticipantOrderByWithAggregationInput[]
  by: Prisma.ChallengeParticipantScalarFieldEnum[] | Prisma.ChallengeParticipantScalarFieldEnum
  having?: Prisma.ChallengeParticipantScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ChallengeParticipantCountAggregateInputType | true
  _min?: ChallengeParticipantMinAggregateInputType
  _max?: ChallengeParticipantMaxAggregateInputType
}

export type ChallengeParticipantGroupByOutputType = {
  id: string
  challengeId: string
  userId: string | null
  teamId: string | null
  joinedAt: Date
  _count: ChallengeParticipantCountAggregateOutputType | null
  _min: ChallengeParticipantMinAggregateOutputType | null
  _max: ChallengeParticipantMaxAggregateOutputType | null
}

type GetChallengeParticipantGroupByPayload<T extends ChallengeParticipantGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ChallengeParticipantGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ChallengeParticipantGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ChallengeParticipantGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ChallengeParticipantGroupByOutputType[P]>
      }
    >
  > 



export type ChallengeParticipantWhereInput = {
  AND?: Prisma.ChallengeParticipantWhereInput | Prisma.ChallengeParticipantWhereInput[]
  OR?: Prisma.ChallengeParticipantWhereInput[]
  NOT?: Prisma.ChallengeParticipantWhereInput | Prisma.ChallengeParticipantWhereInput[]
  id?: Prisma.UuidFilter<"ChallengeParticipant"> | string
  challengeId?: Prisma.UuidFilter<"ChallengeParticipant"> | string
  userId?: Prisma.UuidNullableFilter<"ChallengeParticipant"> | string | null
  teamId?: Prisma.UuidNullableFilter<"ChallengeParticipant"> | string | null
  joinedAt?: Prisma.DateTimeFilter<"ChallengeParticipant"> | Date | string
  challenge?: Prisma.XOR<Prisma.ChallengeScalarRelationFilter, Prisma.ChallengeWhereInput>
  user?: Prisma.XOR<Prisma.ProfileNullableScalarRelationFilter, Prisma.ProfileWhereInput> | null
  team?: Prisma.XOR<Prisma.TeamNullableScalarRelationFilter, Prisma.TeamWhereInput> | null
  activities?: Prisma.ActivityListRelationFilter
  posts?: Prisma.PostListRelationFilter
}

export type ChallengeParticipantOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  challengeId?: Prisma.SortOrder
  userId?: Prisma.SortOrderInput | Prisma.SortOrder
  teamId?: Prisma.SortOrderInput | Prisma.SortOrder
  joinedAt?: Prisma.SortOrder
  challenge?: Prisma.ChallengeOrderByWithRelationInput
  user?: Prisma.ProfileOrderByWithRelationInput
  team?: Prisma.TeamOrderByWithRelationInput
  activities?: Prisma.ActivityOrderByRelationAggregateInput
  posts?: Prisma.PostOrderByRelationAggregateInput
}

export type ChallengeParticipantWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ChallengeParticipantWhereInput | Prisma.ChallengeParticipantWhereInput[]
  OR?: Prisma.ChallengeParticipantWhereInput[]
  NOT?: Prisma.ChallengeParticipantWhereInput | Prisma.ChallengeParticipantWhereInput[]
  challengeId?: Prisma.UuidFilter<"ChallengeParticipant"> | string
  userId?: Prisma.UuidNullableFilter<"ChallengeParticipant"> | string | null
  teamId?: Prisma.UuidNullableFilter<"ChallengeParticipant"> | string | null
  joinedAt?: Prisma.DateTimeFilter<"ChallengeParticipant"> | Date | string
  challenge?: Prisma.XOR<Prisma.ChallengeScalarRelationFilter, Prisma.ChallengeWhereInput>
  user?: Prisma.XOR<Prisma.ProfileNullableScalarRelationFilter, Prisma.ProfileWhereInput> | null
  team?: Prisma.XOR<Prisma.TeamNullableScalarRelationFilter, Prisma.TeamWhereInput> | null
  activities?: Prisma.ActivityListRelationFilter
  posts?: Prisma.PostListRelationFilter
}, "id">

export type ChallengeParticipantOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  challengeId?: Prisma.SortOrder
  userId?: Prisma.SortOrderInput | Prisma.SortOrder
  teamId?: Prisma.SortOrderInput | Prisma.SortOrder
  joinedAt?: Prisma.SortOrder
  _count?: Prisma.ChallengeParticipantCountOrderByAggregateInput
  _max?: Prisma.ChallengeParticipantMaxOrderByAggregateInput
  _min?: Prisma.ChallengeParticipantMinOrderByAggregateInput
}

export type ChallengeParticipantScalarWhereWithAggregatesInput = {
  AND?: Prisma.ChallengeParticipantScalarWhereWithAggregatesInput | Prisma.ChallengeParticipantScalarWhereWithAggregatesInput[]
  OR?: Prisma.ChallengeParticipantScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ChallengeParticipantScalarWhereWithAggregatesInput | Prisma.ChallengeParticipantScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"ChallengeParticipant"> | string
  challengeId?: Prisma.UuidWithAggregatesFilter<"ChallengeParticipant"> | string
  userId?: Prisma.UuidNullableWithAggregatesFilter<"ChallengeParticipant"> | string | null
  teamId?: Prisma.UuidNullableWithAggregatesFilter<"ChallengeParticipant"> | string | null
  joinedAt?: Prisma.DateTimeWithAggregatesFilter<"ChallengeParticipant"> | Date | string
}

export type ChallengeParticipantCreateInput = {
  id?: string
  joinedAt?: Date | string
  challenge: Prisma.ChallengeCreateNestedOneWithoutParticipantsInput
  user?: Prisma.ProfileCreateNestedOneWithoutChallengeEntriesInput
  team?: Prisma.TeamCreateNestedOneWithoutChallengeEntriesInput
  activities?: Prisma.ActivityCreateNestedManyWithoutParticipantInput
  posts?: Prisma.PostCreateNestedManyWithoutParticipantInput
}

export type ChallengeParticipantUncheckedCreateInput = {
  id?: string
  challengeId: string
  userId?: string | null
  teamId?: string | null
  joinedAt?: Date | string
  activities?: Prisma.ActivityUncheckedCreateNestedManyWithoutParticipantInput
  posts?: Prisma.PostUncheckedCreateNestedManyWithoutParticipantInput
}

export type ChallengeParticipantUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  challenge?: Prisma.ChallengeUpdateOneRequiredWithoutParticipantsNestedInput
  user?: Prisma.ProfileUpdateOneWithoutChallengeEntriesNestedInput
  team?: Prisma.TeamUpdateOneWithoutChallengeEntriesNestedInput
  activities?: Prisma.ActivityUpdateManyWithoutParticipantNestedInput
  posts?: Prisma.PostUpdateManyWithoutParticipantNestedInput
}

export type ChallengeParticipantUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  challengeId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  teamId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  activities?: Prisma.ActivityUncheckedUpdateManyWithoutParticipantNestedInput
  posts?: Prisma.PostUncheckedUpdateManyWithoutParticipantNestedInput
}

export type ChallengeParticipantCreateManyInput = {
  id?: string
  challengeId: string
  userId?: string | null
  teamId?: string | null
  joinedAt?: Date | string
}

export type ChallengeParticipantUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChallengeParticipantUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  challengeId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  teamId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChallengeParticipantListRelationFilter = {
  every?: Prisma.ChallengeParticipantWhereInput
  some?: Prisma.ChallengeParticipantWhereInput
  none?: Prisma.ChallengeParticipantWhereInput
}

export type ChallengeParticipantOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ChallengeParticipantCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  challengeId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  teamId?: Prisma.SortOrder
  joinedAt?: Prisma.SortOrder
}

export type ChallengeParticipantMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  challengeId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  teamId?: Prisma.SortOrder
  joinedAt?: Prisma.SortOrder
}

export type ChallengeParticipantMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  challengeId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  teamId?: Prisma.SortOrder
  joinedAt?: Prisma.SortOrder
}

export type ChallengeParticipantScalarRelationFilter = {
  is?: Prisma.ChallengeParticipantWhereInput
  isNot?: Prisma.ChallengeParticipantWhereInput
}

export type ChallengeParticipantCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ChallengeParticipantCreateWithoutUserInput, Prisma.ChallengeParticipantUncheckedCreateWithoutUserInput> | Prisma.ChallengeParticipantCreateWithoutUserInput[] | Prisma.ChallengeParticipantUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ChallengeParticipantCreateOrConnectWithoutUserInput | Prisma.ChallengeParticipantCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ChallengeParticipantCreateManyUserInputEnvelope
  connect?: Prisma.ChallengeParticipantWhereUniqueInput | Prisma.ChallengeParticipantWhereUniqueInput[]
}

export type ChallengeParticipantUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ChallengeParticipantCreateWithoutUserInput, Prisma.ChallengeParticipantUncheckedCreateWithoutUserInput> | Prisma.ChallengeParticipantCreateWithoutUserInput[] | Prisma.ChallengeParticipantUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ChallengeParticipantCreateOrConnectWithoutUserInput | Prisma.ChallengeParticipantCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ChallengeParticipantCreateManyUserInputEnvelope
  connect?: Prisma.ChallengeParticipantWhereUniqueInput | Prisma.ChallengeParticipantWhereUniqueInput[]
}

export type ChallengeParticipantUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ChallengeParticipantCreateWithoutUserInput, Prisma.ChallengeParticipantUncheckedCreateWithoutUserInput> | Prisma.ChallengeParticipantCreateWithoutUserInput[] | Prisma.ChallengeParticipantUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ChallengeParticipantCreateOrConnectWithoutUserInput | Prisma.ChallengeParticipantCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ChallengeParticipantUpsertWithWhereUniqueWithoutUserInput | Prisma.ChallengeParticipantUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ChallengeParticipantCreateManyUserInputEnvelope
  set?: Prisma.ChallengeParticipantWhereUniqueInput | Prisma.ChallengeParticipantWhereUniqueInput[]
  disconnect?: Prisma.ChallengeParticipantWhereUniqueInput | Prisma.ChallengeParticipantWhereUniqueInput[]
  delete?: Prisma.ChallengeParticipantWhereUniqueInput | Prisma.ChallengeParticipantWhereUniqueInput[]
  connect?: Prisma.ChallengeParticipantWhereUniqueInput | Prisma.ChallengeParticipantWhereUniqueInput[]
  update?: Prisma.ChallengeParticipantUpdateWithWhereUniqueWithoutUserInput | Prisma.ChallengeParticipantUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ChallengeParticipantUpdateManyWithWhereWithoutUserInput | Prisma.ChallengeParticipantUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ChallengeParticipantScalarWhereInput | Prisma.ChallengeParticipantScalarWhereInput[]
}

export type ChallengeParticipantUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ChallengeParticipantCreateWithoutUserInput, Prisma.ChallengeParticipantUncheckedCreateWithoutUserInput> | Prisma.ChallengeParticipantCreateWithoutUserInput[] | Prisma.ChallengeParticipantUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ChallengeParticipantCreateOrConnectWithoutUserInput | Prisma.ChallengeParticipantCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ChallengeParticipantUpsertWithWhereUniqueWithoutUserInput | Prisma.ChallengeParticipantUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ChallengeParticipantCreateManyUserInputEnvelope
  set?: Prisma.ChallengeParticipantWhereUniqueInput | Prisma.ChallengeParticipantWhereUniqueInput[]
  disconnect?: Prisma.ChallengeParticipantWhereUniqueInput | Prisma.ChallengeParticipantWhereUniqueInput[]
  delete?: Prisma.ChallengeParticipantWhereUniqueInput | Prisma.ChallengeParticipantWhereUniqueInput[]
  connect?: Prisma.ChallengeParticipantWhereUniqueInput | Prisma.ChallengeParticipantWhereUniqueInput[]
  update?: Prisma.ChallengeParticipantUpdateWithWhereUniqueWithoutUserInput | Prisma.ChallengeParticipantUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ChallengeParticipantUpdateManyWithWhereWithoutUserInput | Prisma.ChallengeParticipantUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ChallengeParticipantScalarWhereInput | Prisma.ChallengeParticipantScalarWhereInput[]
}

export type ChallengeParticipantCreateNestedManyWithoutTeamInput = {
  create?: Prisma.XOR<Prisma.ChallengeParticipantCreateWithoutTeamInput, Prisma.ChallengeParticipantUncheckedCreateWithoutTeamInput> | Prisma.ChallengeParticipantCreateWithoutTeamInput[] | Prisma.ChallengeParticipantUncheckedCreateWithoutTeamInput[]
  connectOrCreate?: Prisma.ChallengeParticipantCreateOrConnectWithoutTeamInput | Prisma.ChallengeParticipantCreateOrConnectWithoutTeamInput[]
  createMany?: Prisma.ChallengeParticipantCreateManyTeamInputEnvelope
  connect?: Prisma.ChallengeParticipantWhereUniqueInput | Prisma.ChallengeParticipantWhereUniqueInput[]
}

export type ChallengeParticipantUncheckedCreateNestedManyWithoutTeamInput = {
  create?: Prisma.XOR<Prisma.ChallengeParticipantCreateWithoutTeamInput, Prisma.ChallengeParticipantUncheckedCreateWithoutTeamInput> | Prisma.ChallengeParticipantCreateWithoutTeamInput[] | Prisma.ChallengeParticipantUncheckedCreateWithoutTeamInput[]
  connectOrCreate?: Prisma.ChallengeParticipantCreateOrConnectWithoutTeamInput | Prisma.ChallengeParticipantCreateOrConnectWithoutTeamInput[]
  createMany?: Prisma.ChallengeParticipantCreateManyTeamInputEnvelope
  connect?: Prisma.ChallengeParticipantWhereUniqueInput | Prisma.ChallengeParticipantWhereUniqueInput[]
}

export type ChallengeParticipantUpdateManyWithoutTeamNestedInput = {
  create?: Prisma.XOR<Prisma.ChallengeParticipantCreateWithoutTeamInput, Prisma.ChallengeParticipantUncheckedCreateWithoutTeamInput> | Prisma.ChallengeParticipantCreateWithoutTeamInput[] | Prisma.ChallengeParticipantUncheckedCreateWithoutTeamInput[]
  connectOrCreate?: Prisma.ChallengeParticipantCreateOrConnectWithoutTeamInput | Prisma.ChallengeParticipantCreateOrConnectWithoutTeamInput[]
  upsert?: Prisma.ChallengeParticipantUpsertWithWhereUniqueWithoutTeamInput | Prisma.ChallengeParticipantUpsertWithWhereUniqueWithoutTeamInput[]
  createMany?: Prisma.ChallengeParticipantCreateManyTeamInputEnvelope
  set?: Prisma.ChallengeParticipantWhereUniqueInput | Prisma.ChallengeParticipantWhereUniqueInput[]
  disconnect?: Prisma.ChallengeParticipantWhereUniqueInput | Prisma.ChallengeParticipantWhereUniqueInput[]
  delete?: Prisma.ChallengeParticipantWhereUniqueInput | Prisma.ChallengeParticipantWhereUniqueInput[]
  connect?: Prisma.ChallengeParticipantWhereUniqueInput | Prisma.ChallengeParticipantWhereUniqueInput[]
  update?: Prisma.ChallengeParticipantUpdateWithWhereUniqueWithoutTeamInput | Prisma.ChallengeParticipantUpdateWithWhereUniqueWithoutTeamInput[]
  updateMany?: Prisma.ChallengeParticipantUpdateManyWithWhereWithoutTeamInput | Prisma.ChallengeParticipantUpdateManyWithWhereWithoutTeamInput[]
  deleteMany?: Prisma.ChallengeParticipantScalarWhereInput | Prisma.ChallengeParticipantScalarWhereInput[]
}

export type ChallengeParticipantUncheckedUpdateManyWithoutTeamNestedInput = {
  create?: Prisma.XOR<Prisma.ChallengeParticipantCreateWithoutTeamInput, Prisma.ChallengeParticipantUncheckedCreateWithoutTeamInput> | Prisma.ChallengeParticipantCreateWithoutTeamInput[] | Prisma.ChallengeParticipantUncheckedCreateWithoutTeamInput[]
  connectOrCreate?: Prisma.ChallengeParticipantCreateOrConnectWithoutTeamInput | Prisma.ChallengeParticipantCreateOrConnectWithoutTeamInput[]
  upsert?: Prisma.ChallengeParticipantUpsertWithWhereUniqueWithoutTeamInput | Prisma.ChallengeParticipantUpsertWithWhereUniqueWithoutTeamInput[]
  createMany?: Prisma.ChallengeParticipantCreateManyTeamInputEnvelope
  set?: Prisma.ChallengeParticipantWhereUniqueInput | Prisma.ChallengeParticipantWhereUniqueInput[]
  disconnect?: Prisma.ChallengeParticipantWhereUniqueInput | Prisma.ChallengeParticipantWhereUniqueInput[]
  delete?: Prisma.ChallengeParticipantWhereUniqueInput | Prisma.ChallengeParticipantWhereUniqueInput[]
  connect?: Prisma.ChallengeParticipantWhereUniqueInput | Prisma.ChallengeParticipantWhereUniqueInput[]
  update?: Prisma.ChallengeParticipantUpdateWithWhereUniqueWithoutTeamInput | Prisma.ChallengeParticipantUpdateWithWhereUniqueWithoutTeamInput[]
  updateMany?: Prisma.ChallengeParticipantUpdateManyWithWhereWithoutTeamInput | Prisma.ChallengeParticipantUpdateManyWithWhereWithoutTeamInput[]
  deleteMany?: Prisma.ChallengeParticipantScalarWhereInput | Prisma.ChallengeParticipantScalarWhereInput[]
}

export type ChallengeParticipantCreateNestedManyWithoutChallengeInput = {
  create?: Prisma.XOR<Prisma.ChallengeParticipantCreateWithoutChallengeInput, Prisma.ChallengeParticipantUncheckedCreateWithoutChallengeInput> | Prisma.ChallengeParticipantCreateWithoutChallengeInput[] | Prisma.ChallengeParticipantUncheckedCreateWithoutChallengeInput[]
  connectOrCreate?: Prisma.ChallengeParticipantCreateOrConnectWithoutChallengeInput | Prisma.ChallengeParticipantCreateOrConnectWithoutChallengeInput[]
  createMany?: Prisma.ChallengeParticipantCreateManyChallengeInputEnvelope
  connect?: Prisma.ChallengeParticipantWhereUniqueInput | Prisma.ChallengeParticipantWhereUniqueInput[]
}

export type ChallengeParticipantUncheckedCreateNestedManyWithoutChallengeInput = {
  create?: Prisma.XOR<Prisma.ChallengeParticipantCreateWithoutChallengeInput, Prisma.ChallengeParticipantUncheckedCreateWithoutChallengeInput> | Prisma.ChallengeParticipantCreateWithoutChallengeInput[] | Prisma.ChallengeParticipantUncheckedCreateWithoutChallengeInput[]
  connectOrCreate?: Prisma.ChallengeParticipantCreateOrConnectWithoutChallengeInput | Prisma.ChallengeParticipantCreateOrConnectWithoutChallengeInput[]
  createMany?: Prisma.ChallengeParticipantCreateManyChallengeInputEnvelope
  connect?: Prisma.ChallengeParticipantWhereUniqueInput | Prisma.ChallengeParticipantWhereUniqueInput[]
}

export type ChallengeParticipantUpdateManyWithoutChallengeNestedInput = {
  create?: Prisma.XOR<Prisma.ChallengeParticipantCreateWithoutChallengeInput, Prisma.ChallengeParticipantUncheckedCreateWithoutChallengeInput> | Prisma.ChallengeParticipantCreateWithoutChallengeInput[] | Prisma.ChallengeParticipantUncheckedCreateWithoutChallengeInput[]
  connectOrCreate?: Prisma.ChallengeParticipantCreateOrConnectWithoutChallengeInput | Prisma.ChallengeParticipantCreateOrConnectWithoutChallengeInput[]
  upsert?: Prisma.ChallengeParticipantUpsertWithWhereUniqueWithoutChallengeInput | Prisma.ChallengeParticipantUpsertWithWhereUniqueWithoutChallengeInput[]
  createMany?: Prisma.ChallengeParticipantCreateManyChallengeInputEnvelope
  set?: Prisma.ChallengeParticipantWhereUniqueInput | Prisma.ChallengeParticipantWhereUniqueInput[]
  disconnect?: Prisma.ChallengeParticipantWhereUniqueInput | Prisma.ChallengeParticipantWhereUniqueInput[]
  delete?: Prisma.ChallengeParticipantWhereUniqueInput | Prisma.ChallengeParticipantWhereUniqueInput[]
  connect?: Prisma.ChallengeParticipantWhereUniqueInput | Prisma.ChallengeParticipantWhereUniqueInput[]
  update?: Prisma.ChallengeParticipantUpdateWithWhereUniqueWithoutChallengeInput | Prisma.ChallengeParticipantUpdateWithWhereUniqueWithoutChallengeInput[]
  updateMany?: Prisma.ChallengeParticipantUpdateManyWithWhereWithoutChallengeInput | Prisma.ChallengeParticipantUpdateManyWithWhereWithoutChallengeInput[]
  deleteMany?: Prisma.ChallengeParticipantScalarWhereInput | Prisma.ChallengeParticipantScalarWhereInput[]
}

export type ChallengeParticipantUncheckedUpdateManyWithoutChallengeNestedInput = {
  create?: Prisma.XOR<Prisma.ChallengeParticipantCreateWithoutChallengeInput, Prisma.ChallengeParticipantUncheckedCreateWithoutChallengeInput> | Prisma.ChallengeParticipantCreateWithoutChallengeInput[] | Prisma.ChallengeParticipantUncheckedCreateWithoutChallengeInput[]
  connectOrCreate?: Prisma.ChallengeParticipantCreateOrConnectWithoutChallengeInput | Prisma.ChallengeParticipantCreateOrConnectWithoutChallengeInput[]
  upsert?: Prisma.ChallengeParticipantUpsertWithWhereUniqueWithoutChallengeInput | Prisma.ChallengeParticipantUpsertWithWhereUniqueWithoutChallengeInput[]
  createMany?: Prisma.ChallengeParticipantCreateManyChallengeInputEnvelope
  set?: Prisma.ChallengeParticipantWhereUniqueInput | Prisma.ChallengeParticipantWhereUniqueInput[]
  disconnect?: Prisma.ChallengeParticipantWhereUniqueInput | Prisma.ChallengeParticipantWhereUniqueInput[]
  delete?: Prisma.ChallengeParticipantWhereUniqueInput | Prisma.ChallengeParticipantWhereUniqueInput[]
  connect?: Prisma.ChallengeParticipantWhereUniqueInput | Prisma.ChallengeParticipantWhereUniqueInput[]
  update?: Prisma.ChallengeParticipantUpdateWithWhereUniqueWithoutChallengeInput | Prisma.ChallengeParticipantUpdateWithWhereUniqueWithoutChallengeInput[]
  updateMany?: Prisma.ChallengeParticipantUpdateManyWithWhereWithoutChallengeInput | Prisma.ChallengeParticipantUpdateManyWithWhereWithoutChallengeInput[]
  deleteMany?: Prisma.ChallengeParticipantScalarWhereInput | Prisma.ChallengeParticipantScalarWhereInput[]
}

export type ChallengeParticipantCreateNestedOneWithoutActivitiesInput = {
  create?: Prisma.XOR<Prisma.ChallengeParticipantCreateWithoutActivitiesInput, Prisma.ChallengeParticipantUncheckedCreateWithoutActivitiesInput>
  connectOrCreate?: Prisma.ChallengeParticipantCreateOrConnectWithoutActivitiesInput
  connect?: Prisma.ChallengeParticipantWhereUniqueInput
}

export type ChallengeParticipantUpdateOneRequiredWithoutActivitiesNestedInput = {
  create?: Prisma.XOR<Prisma.ChallengeParticipantCreateWithoutActivitiesInput, Prisma.ChallengeParticipantUncheckedCreateWithoutActivitiesInput>
  connectOrCreate?: Prisma.ChallengeParticipantCreateOrConnectWithoutActivitiesInput
  upsert?: Prisma.ChallengeParticipantUpsertWithoutActivitiesInput
  connect?: Prisma.ChallengeParticipantWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ChallengeParticipantUpdateToOneWithWhereWithoutActivitiesInput, Prisma.ChallengeParticipantUpdateWithoutActivitiesInput>, Prisma.ChallengeParticipantUncheckedUpdateWithoutActivitiesInput>
}

export type ChallengeParticipantCreateNestedOneWithoutPostsInput = {
  create?: Prisma.XOR<Prisma.ChallengeParticipantCreateWithoutPostsInput, Prisma.ChallengeParticipantUncheckedCreateWithoutPostsInput>
  connectOrCreate?: Prisma.ChallengeParticipantCreateOrConnectWithoutPostsInput
  connect?: Prisma.ChallengeParticipantWhereUniqueInput
}

export type ChallengeParticipantUpdateOneRequiredWithoutPostsNestedInput = {
  create?: Prisma.XOR<Prisma.ChallengeParticipantCreateWithoutPostsInput, Prisma.ChallengeParticipantUncheckedCreateWithoutPostsInput>
  connectOrCreate?: Prisma.ChallengeParticipantCreateOrConnectWithoutPostsInput
  upsert?: Prisma.ChallengeParticipantUpsertWithoutPostsInput
  connect?: Prisma.ChallengeParticipantWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ChallengeParticipantUpdateToOneWithWhereWithoutPostsInput, Prisma.ChallengeParticipantUpdateWithoutPostsInput>, Prisma.ChallengeParticipantUncheckedUpdateWithoutPostsInput>
}

export type ChallengeParticipantCreateWithoutUserInput = {
  id?: string
  joinedAt?: Date | string
  challenge: Prisma.ChallengeCreateNestedOneWithoutParticipantsInput
  team?: Prisma.TeamCreateNestedOneWithoutChallengeEntriesInput
  activities?: Prisma.ActivityCreateNestedManyWithoutParticipantInput
  posts?: Prisma.PostCreateNestedManyWithoutParticipantInput
}

export type ChallengeParticipantUncheckedCreateWithoutUserInput = {
  id?: string
  challengeId: string
  teamId?: string | null
  joinedAt?: Date | string
  activities?: Prisma.ActivityUncheckedCreateNestedManyWithoutParticipantInput
  posts?: Prisma.PostUncheckedCreateNestedManyWithoutParticipantInput
}

export type ChallengeParticipantCreateOrConnectWithoutUserInput = {
  where: Prisma.ChallengeParticipantWhereUniqueInput
  create: Prisma.XOR<Prisma.ChallengeParticipantCreateWithoutUserInput, Prisma.ChallengeParticipantUncheckedCreateWithoutUserInput>
}

export type ChallengeParticipantCreateManyUserInputEnvelope = {
  data: Prisma.ChallengeParticipantCreateManyUserInput | Prisma.ChallengeParticipantCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type ChallengeParticipantUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.ChallengeParticipantWhereUniqueInput
  update: Prisma.XOR<Prisma.ChallengeParticipantUpdateWithoutUserInput, Prisma.ChallengeParticipantUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.ChallengeParticipantCreateWithoutUserInput, Prisma.ChallengeParticipantUncheckedCreateWithoutUserInput>
}

export type ChallengeParticipantUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.ChallengeParticipantWhereUniqueInput
  data: Prisma.XOR<Prisma.ChallengeParticipantUpdateWithoutUserInput, Prisma.ChallengeParticipantUncheckedUpdateWithoutUserInput>
}

export type ChallengeParticipantUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.ChallengeParticipantScalarWhereInput
  data: Prisma.XOR<Prisma.ChallengeParticipantUpdateManyMutationInput, Prisma.ChallengeParticipantUncheckedUpdateManyWithoutUserInput>
}

export type ChallengeParticipantScalarWhereInput = {
  AND?: Prisma.ChallengeParticipantScalarWhereInput | Prisma.ChallengeParticipantScalarWhereInput[]
  OR?: Prisma.ChallengeParticipantScalarWhereInput[]
  NOT?: Prisma.ChallengeParticipantScalarWhereInput | Prisma.ChallengeParticipantScalarWhereInput[]
  id?: Prisma.UuidFilter<"ChallengeParticipant"> | string
  challengeId?: Prisma.UuidFilter<"ChallengeParticipant"> | string
  userId?: Prisma.UuidNullableFilter<"ChallengeParticipant"> | string | null
  teamId?: Prisma.UuidNullableFilter<"ChallengeParticipant"> | string | null
  joinedAt?: Prisma.DateTimeFilter<"ChallengeParticipant"> | Date | string
}

export type ChallengeParticipantCreateWithoutTeamInput = {
  id?: string
  joinedAt?: Date | string
  challenge: Prisma.ChallengeCreateNestedOneWithoutParticipantsInput
  user?: Prisma.ProfileCreateNestedOneWithoutChallengeEntriesInput
  activities?: Prisma.ActivityCreateNestedManyWithoutParticipantInput
  posts?: Prisma.PostCreateNestedManyWithoutParticipantInput
}

export type ChallengeParticipantUncheckedCreateWithoutTeamInput = {
  id?: string
  challengeId: string
  userId?: string | null
  joinedAt?: Date | string
  activities?: Prisma.ActivityUncheckedCreateNestedManyWithoutParticipantInput
  posts?: Prisma.PostUncheckedCreateNestedManyWithoutParticipantInput
}

export type ChallengeParticipantCreateOrConnectWithoutTeamInput = {
  where: Prisma.ChallengeParticipantWhereUniqueInput
  create: Prisma.XOR<Prisma.ChallengeParticipantCreateWithoutTeamInput, Prisma.ChallengeParticipantUncheckedCreateWithoutTeamInput>
}

export type ChallengeParticipantCreateManyTeamInputEnvelope = {
  data: Prisma.ChallengeParticipantCreateManyTeamInput | Prisma.ChallengeParticipantCreateManyTeamInput[]
  skipDuplicates?: boolean
}

export type ChallengeParticipantUpsertWithWhereUniqueWithoutTeamInput = {
  where: Prisma.ChallengeParticipantWhereUniqueInput
  update: Prisma.XOR<Prisma.ChallengeParticipantUpdateWithoutTeamInput, Prisma.ChallengeParticipantUncheckedUpdateWithoutTeamInput>
  create: Prisma.XOR<Prisma.ChallengeParticipantCreateWithoutTeamInput, Prisma.ChallengeParticipantUncheckedCreateWithoutTeamInput>
}

export type ChallengeParticipantUpdateWithWhereUniqueWithoutTeamInput = {
  where: Prisma.ChallengeParticipantWhereUniqueInput
  data: Prisma.XOR<Prisma.ChallengeParticipantUpdateWithoutTeamInput, Prisma.ChallengeParticipantUncheckedUpdateWithoutTeamInput>
}

export type ChallengeParticipantUpdateManyWithWhereWithoutTeamInput = {
  where: Prisma.ChallengeParticipantScalarWhereInput
  data: Prisma.XOR<Prisma.ChallengeParticipantUpdateManyMutationInput, Prisma.ChallengeParticipantUncheckedUpdateManyWithoutTeamInput>
}

export type ChallengeParticipantCreateWithoutChallengeInput = {
  id?: string
  joinedAt?: Date | string
  user?: Prisma.ProfileCreateNestedOneWithoutChallengeEntriesInput
  team?: Prisma.TeamCreateNestedOneWithoutChallengeEntriesInput
  activities?: Prisma.ActivityCreateNestedManyWithoutParticipantInput
  posts?: Prisma.PostCreateNestedManyWithoutParticipantInput
}

export type ChallengeParticipantUncheckedCreateWithoutChallengeInput = {
  id?: string
  userId?: string | null
  teamId?: string | null
  joinedAt?: Date | string
  activities?: Prisma.ActivityUncheckedCreateNestedManyWithoutParticipantInput
  posts?: Prisma.PostUncheckedCreateNestedManyWithoutParticipantInput
}

export type ChallengeParticipantCreateOrConnectWithoutChallengeInput = {
  where: Prisma.ChallengeParticipantWhereUniqueInput
  create: Prisma.XOR<Prisma.ChallengeParticipantCreateWithoutChallengeInput, Prisma.ChallengeParticipantUncheckedCreateWithoutChallengeInput>
}

export type ChallengeParticipantCreateManyChallengeInputEnvelope = {
  data: Prisma.ChallengeParticipantCreateManyChallengeInput | Prisma.ChallengeParticipantCreateManyChallengeInput[]
  skipDuplicates?: boolean
}

export type ChallengeParticipantUpsertWithWhereUniqueWithoutChallengeInput = {
  where: Prisma.ChallengeParticipantWhereUniqueInput
  update: Prisma.XOR<Prisma.ChallengeParticipantUpdateWithoutChallengeInput, Prisma.ChallengeParticipantUncheckedUpdateWithoutChallengeInput>
  create: Prisma.XOR<Prisma.ChallengeParticipantCreateWithoutChallengeInput, Prisma.ChallengeParticipantUncheckedCreateWithoutChallengeInput>
}

export type ChallengeParticipantUpdateWithWhereUniqueWithoutChallengeInput = {
  where: Prisma.ChallengeParticipantWhereUniqueInput
  data: Prisma.XOR<Prisma.ChallengeParticipantUpdateWithoutChallengeInput, Prisma.ChallengeParticipantUncheckedUpdateWithoutChallengeInput>
}

export type ChallengeParticipantUpdateManyWithWhereWithoutChallengeInput = {
  where: Prisma.ChallengeParticipantScalarWhereInput
  data: Prisma.XOR<Prisma.ChallengeParticipantUpdateManyMutationInput, Prisma.ChallengeParticipantUncheckedUpdateManyWithoutChallengeInput>
}

export type ChallengeParticipantCreateWithoutActivitiesInput = {
  id?: string
  joinedAt?: Date | string
  challenge: Prisma.ChallengeCreateNestedOneWithoutParticipantsInput
  user?: Prisma.ProfileCreateNestedOneWithoutChallengeEntriesInput
  team?: Prisma.TeamCreateNestedOneWithoutChallengeEntriesInput
  posts?: Prisma.PostCreateNestedManyWithoutParticipantInput
}

export type ChallengeParticipantUncheckedCreateWithoutActivitiesInput = {
  id?: string
  challengeId: string
  userId?: string | null
  teamId?: string | null
  joinedAt?: Date | string
  posts?: Prisma.PostUncheckedCreateNestedManyWithoutParticipantInput
}

export type ChallengeParticipantCreateOrConnectWithoutActivitiesInput = {
  where: Prisma.ChallengeParticipantWhereUniqueInput
  create: Prisma.XOR<Prisma.ChallengeParticipantCreateWithoutActivitiesInput, Prisma.ChallengeParticipantUncheckedCreateWithoutActivitiesInput>
}

export type ChallengeParticipantUpsertWithoutActivitiesInput = {
  update: Prisma.XOR<Prisma.ChallengeParticipantUpdateWithoutActivitiesInput, Prisma.ChallengeParticipantUncheckedUpdateWithoutActivitiesInput>
  create: Prisma.XOR<Prisma.ChallengeParticipantCreateWithoutActivitiesInput, Prisma.ChallengeParticipantUncheckedCreateWithoutActivitiesInput>
  where?: Prisma.ChallengeParticipantWhereInput
}

export type ChallengeParticipantUpdateToOneWithWhereWithoutActivitiesInput = {
  where?: Prisma.ChallengeParticipantWhereInput
  data: Prisma.XOR<Prisma.ChallengeParticipantUpdateWithoutActivitiesInput, Prisma.ChallengeParticipantUncheckedUpdateWithoutActivitiesInput>
}

export type ChallengeParticipantUpdateWithoutActivitiesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  challenge?: Prisma.ChallengeUpdateOneRequiredWithoutParticipantsNestedInput
  user?: Prisma.ProfileUpdateOneWithoutChallengeEntriesNestedInput
  team?: Prisma.TeamUpdateOneWithoutChallengeEntriesNestedInput
  posts?: Prisma.PostUpdateManyWithoutParticipantNestedInput
}

export type ChallengeParticipantUncheckedUpdateWithoutActivitiesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  challengeId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  teamId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  posts?: Prisma.PostUncheckedUpdateManyWithoutParticipantNestedInput
}

export type ChallengeParticipantCreateWithoutPostsInput = {
  id?: string
  joinedAt?: Date | string
  challenge: Prisma.ChallengeCreateNestedOneWithoutParticipantsInput
  user?: Prisma.ProfileCreateNestedOneWithoutChallengeEntriesInput
  team?: Prisma.TeamCreateNestedOneWithoutChallengeEntriesInput
  activities?: Prisma.ActivityCreateNestedManyWithoutParticipantInput
}

export type ChallengeParticipantUncheckedCreateWithoutPostsInput = {
  id?: string
  challengeId: string
  userId?: string | null
  teamId?: string | null
  joinedAt?: Date | string
  activities?: Prisma.ActivityUncheckedCreateNestedManyWithoutParticipantInput
}

export type ChallengeParticipantCreateOrConnectWithoutPostsInput = {
  where: Prisma.ChallengeParticipantWhereUniqueInput
  create: Prisma.XOR<Prisma.ChallengeParticipantCreateWithoutPostsInput, Prisma.ChallengeParticipantUncheckedCreateWithoutPostsInput>
}

export type ChallengeParticipantUpsertWithoutPostsInput = {
  update: Prisma.XOR<Prisma.ChallengeParticipantUpdateWithoutPostsInput, Prisma.ChallengeParticipantUncheckedUpdateWithoutPostsInput>
  create: Prisma.XOR<Prisma.ChallengeParticipantCreateWithoutPostsInput, Prisma.ChallengeParticipantUncheckedCreateWithoutPostsInput>
  where?: Prisma.ChallengeParticipantWhereInput
}

export type ChallengeParticipantUpdateToOneWithWhereWithoutPostsInput = {
  where?: Prisma.ChallengeParticipantWhereInput
  data: Prisma.XOR<Prisma.ChallengeParticipantUpdateWithoutPostsInput, Prisma.ChallengeParticipantUncheckedUpdateWithoutPostsInput>
}

export type ChallengeParticipantUpdateWithoutPostsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  challenge?: Prisma.ChallengeUpdateOneRequiredWithoutParticipantsNestedInput
  user?: Prisma.ProfileUpdateOneWithoutChallengeEntriesNestedInput
  team?: Prisma.TeamUpdateOneWithoutChallengeEntriesNestedInput
  activities?: Prisma.ActivityUpdateManyWithoutParticipantNestedInput
}

export type ChallengeParticipantUncheckedUpdateWithoutPostsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  challengeId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  teamId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  activities?: Prisma.ActivityUncheckedUpdateManyWithoutParticipantNestedInput
}

export type ChallengeParticipantCreateManyUserInput = {
  id?: string
  challengeId: string
  teamId?: string | null
  joinedAt?: Date | string
}

export type ChallengeParticipantUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  challenge?: Prisma.ChallengeUpdateOneRequiredWithoutParticipantsNestedInput
  team?: Prisma.TeamUpdateOneWithoutChallengeEntriesNestedInput
  activities?: Prisma.ActivityUpdateManyWithoutParticipantNestedInput
  posts?: Prisma.PostUpdateManyWithoutParticipantNestedInput
}

export type ChallengeParticipantUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  challengeId?: Prisma.StringFieldUpdateOperationsInput | string
  teamId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  activities?: Prisma.ActivityUncheckedUpdateManyWithoutParticipantNestedInput
  posts?: Prisma.PostUncheckedUpdateManyWithoutParticipantNestedInput
}

export type ChallengeParticipantUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  challengeId?: Prisma.StringFieldUpdateOperationsInput | string
  teamId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChallengeParticipantCreateManyTeamInput = {
  id?: string
  challengeId: string
  userId?: string | null
  joinedAt?: Date | string
}

export type ChallengeParticipantUpdateWithoutTeamInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  challenge?: Prisma.ChallengeUpdateOneRequiredWithoutParticipantsNestedInput
  user?: Prisma.ProfileUpdateOneWithoutChallengeEntriesNestedInput
  activities?: Prisma.ActivityUpdateManyWithoutParticipantNestedInput
  posts?: Prisma.PostUpdateManyWithoutParticipantNestedInput
}

export type ChallengeParticipantUncheckedUpdateWithoutTeamInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  challengeId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  activities?: Prisma.ActivityUncheckedUpdateManyWithoutParticipantNestedInput
  posts?: Prisma.PostUncheckedUpdateManyWithoutParticipantNestedInput
}

export type ChallengeParticipantUncheckedUpdateManyWithoutTeamInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  challengeId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChallengeParticipantCreateManyChallengeInput = {
  id?: string
  userId?: string | null
  teamId?: string | null
  joinedAt?: Date | string
}

export type ChallengeParticipantUpdateWithoutChallengeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.ProfileUpdateOneWithoutChallengeEntriesNestedInput
  team?: Prisma.TeamUpdateOneWithoutChallengeEntriesNestedInput
  activities?: Prisma.ActivityUpdateManyWithoutParticipantNestedInput
  posts?: Prisma.PostUpdateManyWithoutParticipantNestedInput
}

export type ChallengeParticipantUncheckedUpdateWithoutChallengeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  teamId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  activities?: Prisma.ActivityUncheckedUpdateManyWithoutParticipantNestedInput
  posts?: Prisma.PostUncheckedUpdateManyWithoutParticipantNestedInput
}

export type ChallengeParticipantUncheckedUpdateManyWithoutChallengeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  teamId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type ChallengeParticipantCountOutputType
 */

export type ChallengeParticipantCountOutputType = {
  activities: number
  posts: number
}

export type ChallengeParticipantCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  activities?: boolean | ChallengeParticipantCountOutputTypeCountActivitiesArgs
  posts?: boolean | ChallengeParticipantCountOutputTypeCountPostsArgs
}

/**
 * ChallengeParticipantCountOutputType without action
 */
export type ChallengeParticipantCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChallengeParticipantCountOutputType
   */
  select?: Prisma.ChallengeParticipantCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ChallengeParticipantCountOutputType without action
 */
export type ChallengeParticipantCountOutputTypeCountActivitiesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ActivityWhereInput
}

/**
 * ChallengeParticipantCountOutputType without action
 */
export type ChallengeParticipantCountOutputTypeCountPostsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PostWhereInput
}


export type ChallengeParticipantSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  challengeId?: boolean
  userId?: boolean
  teamId?: boolean
  joinedAt?: boolean
  challenge?: boolean | Prisma.ChallengeDefaultArgs<ExtArgs>
  user?: boolean | Prisma.ChallengeParticipant$userArgs<ExtArgs>
  team?: boolean | Prisma.ChallengeParticipant$teamArgs<ExtArgs>
  activities?: boolean | Prisma.ChallengeParticipant$activitiesArgs<ExtArgs>
  posts?: boolean | Prisma.ChallengeParticipant$postsArgs<ExtArgs>
  _count?: boolean | Prisma.ChallengeParticipantCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["challengeParticipant"]>

export type ChallengeParticipantSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  challengeId?: boolean
  userId?: boolean
  teamId?: boolean
  joinedAt?: boolean
  challenge?: boolean | Prisma.ChallengeDefaultArgs<ExtArgs>
  user?: boolean | Prisma.ChallengeParticipant$userArgs<ExtArgs>
  team?: boolean | Prisma.ChallengeParticipant$teamArgs<ExtArgs>
}, ExtArgs["result"]["challengeParticipant"]>

export type ChallengeParticipantSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  challengeId?: boolean
  userId?: boolean
  teamId?: boolean
  joinedAt?: boolean
  challenge?: boolean | Prisma.ChallengeDefaultArgs<ExtArgs>
  user?: boolean | Prisma.ChallengeParticipant$userArgs<ExtArgs>
  team?: boolean | Prisma.ChallengeParticipant$teamArgs<ExtArgs>
}, ExtArgs["result"]["challengeParticipant"]>

export type ChallengeParticipantSelectScalar = {
  id?: boolean
  challengeId?: boolean
  userId?: boolean
  teamId?: boolean
  joinedAt?: boolean
}

export type ChallengeParticipantOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "challengeId" | "userId" | "teamId" | "joinedAt", ExtArgs["result"]["challengeParticipant"]>
export type ChallengeParticipantInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  challenge?: boolean | Prisma.ChallengeDefaultArgs<ExtArgs>
  user?: boolean | Prisma.ChallengeParticipant$userArgs<ExtArgs>
  team?: boolean | Prisma.ChallengeParticipant$teamArgs<ExtArgs>
  activities?: boolean | Prisma.ChallengeParticipant$activitiesArgs<ExtArgs>
  posts?: boolean | Prisma.ChallengeParticipant$postsArgs<ExtArgs>
  _count?: boolean | Prisma.ChallengeParticipantCountOutputTypeDefaultArgs<ExtArgs>
}
export type ChallengeParticipantIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  challenge?: boolean | Prisma.ChallengeDefaultArgs<ExtArgs>
  user?: boolean | Prisma.ChallengeParticipant$userArgs<ExtArgs>
  team?: boolean | Prisma.ChallengeParticipant$teamArgs<ExtArgs>
}
export type ChallengeParticipantIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  challenge?: boolean | Prisma.ChallengeDefaultArgs<ExtArgs>
  user?: boolean | Prisma.ChallengeParticipant$userArgs<ExtArgs>
  team?: boolean | Prisma.ChallengeParticipant$teamArgs<ExtArgs>
}

export type $ChallengeParticipantPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ChallengeParticipant"
  objects: {
    challenge: Prisma.$ChallengePayload<ExtArgs>
    user: Prisma.$ProfilePayload<ExtArgs> | null
    team: Prisma.$TeamPayload<ExtArgs> | null
    activities: Prisma.$ActivityPayload<ExtArgs>[]
    posts: Prisma.$PostPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    challengeId: string
    userId: string | null
    teamId: string | null
    joinedAt: Date
  }, ExtArgs["result"]["challengeParticipant"]>
  composites: {}
}

export type ChallengeParticipantGetPayload<S extends boolean | null | undefined | ChallengeParticipantDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ChallengeParticipantPayload, S>

export type ChallengeParticipantCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ChallengeParticipantFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ChallengeParticipantCountAggregateInputType | true
  }

export interface ChallengeParticipantDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChallengeParticipant'], meta: { name: 'ChallengeParticipant' } }
  /**
   * Find zero or one ChallengeParticipant that matches the filter.
   * @param {ChallengeParticipantFindUniqueArgs} args - Arguments to find a ChallengeParticipant
   * @example
   * // Get one ChallengeParticipant
   * const challengeParticipant = await prisma.challengeParticipant.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ChallengeParticipantFindUniqueArgs>(args: Prisma.SelectSubset<T, ChallengeParticipantFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ChallengeParticipantClient<runtime.Types.Result.GetResult<Prisma.$ChallengeParticipantPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ChallengeParticipant that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ChallengeParticipantFindUniqueOrThrowArgs} args - Arguments to find a ChallengeParticipant
   * @example
   * // Get one ChallengeParticipant
   * const challengeParticipant = await prisma.challengeParticipant.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ChallengeParticipantFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ChallengeParticipantFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ChallengeParticipantClient<runtime.Types.Result.GetResult<Prisma.$ChallengeParticipantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ChallengeParticipant that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChallengeParticipantFindFirstArgs} args - Arguments to find a ChallengeParticipant
   * @example
   * // Get one ChallengeParticipant
   * const challengeParticipant = await prisma.challengeParticipant.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ChallengeParticipantFindFirstArgs>(args?: Prisma.SelectSubset<T, ChallengeParticipantFindFirstArgs<ExtArgs>>): Prisma.Prisma__ChallengeParticipantClient<runtime.Types.Result.GetResult<Prisma.$ChallengeParticipantPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ChallengeParticipant that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChallengeParticipantFindFirstOrThrowArgs} args - Arguments to find a ChallengeParticipant
   * @example
   * // Get one ChallengeParticipant
   * const challengeParticipant = await prisma.challengeParticipant.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ChallengeParticipantFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ChallengeParticipantFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ChallengeParticipantClient<runtime.Types.Result.GetResult<Prisma.$ChallengeParticipantPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ChallengeParticipants that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChallengeParticipantFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ChallengeParticipants
   * const challengeParticipants = await prisma.challengeParticipant.findMany()
   * 
   * // Get first 10 ChallengeParticipants
   * const challengeParticipants = await prisma.challengeParticipant.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const challengeParticipantWithIdOnly = await prisma.challengeParticipant.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ChallengeParticipantFindManyArgs>(args?: Prisma.SelectSubset<T, ChallengeParticipantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChallengeParticipantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ChallengeParticipant.
   * @param {ChallengeParticipantCreateArgs} args - Arguments to create a ChallengeParticipant.
   * @example
   * // Create one ChallengeParticipant
   * const ChallengeParticipant = await prisma.challengeParticipant.create({
   *   data: {
   *     // ... data to create a ChallengeParticipant
   *   }
   * })
   * 
   */
  create<T extends ChallengeParticipantCreateArgs>(args: Prisma.SelectSubset<T, ChallengeParticipantCreateArgs<ExtArgs>>): Prisma.Prisma__ChallengeParticipantClient<runtime.Types.Result.GetResult<Prisma.$ChallengeParticipantPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ChallengeParticipants.
   * @param {ChallengeParticipantCreateManyArgs} args - Arguments to create many ChallengeParticipants.
   * @example
   * // Create many ChallengeParticipants
   * const challengeParticipant = await prisma.challengeParticipant.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ChallengeParticipantCreateManyArgs>(args?: Prisma.SelectSubset<T, ChallengeParticipantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ChallengeParticipants and returns the data saved in the database.
   * @param {ChallengeParticipantCreateManyAndReturnArgs} args - Arguments to create many ChallengeParticipants.
   * @example
   * // Create many ChallengeParticipants
   * const challengeParticipant = await prisma.challengeParticipant.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ChallengeParticipants and only return the `id`
   * const challengeParticipantWithIdOnly = await prisma.challengeParticipant.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ChallengeParticipantCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ChallengeParticipantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChallengeParticipantPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ChallengeParticipant.
   * @param {ChallengeParticipantDeleteArgs} args - Arguments to delete one ChallengeParticipant.
   * @example
   * // Delete one ChallengeParticipant
   * const ChallengeParticipant = await prisma.challengeParticipant.delete({
   *   where: {
   *     // ... filter to delete one ChallengeParticipant
   *   }
   * })
   * 
   */
  delete<T extends ChallengeParticipantDeleteArgs>(args: Prisma.SelectSubset<T, ChallengeParticipantDeleteArgs<ExtArgs>>): Prisma.Prisma__ChallengeParticipantClient<runtime.Types.Result.GetResult<Prisma.$ChallengeParticipantPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ChallengeParticipant.
   * @param {ChallengeParticipantUpdateArgs} args - Arguments to update one ChallengeParticipant.
   * @example
   * // Update one ChallengeParticipant
   * const challengeParticipant = await prisma.challengeParticipant.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ChallengeParticipantUpdateArgs>(args: Prisma.SelectSubset<T, ChallengeParticipantUpdateArgs<ExtArgs>>): Prisma.Prisma__ChallengeParticipantClient<runtime.Types.Result.GetResult<Prisma.$ChallengeParticipantPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ChallengeParticipants.
   * @param {ChallengeParticipantDeleteManyArgs} args - Arguments to filter ChallengeParticipants to delete.
   * @example
   * // Delete a few ChallengeParticipants
   * const { count } = await prisma.challengeParticipant.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ChallengeParticipantDeleteManyArgs>(args?: Prisma.SelectSubset<T, ChallengeParticipantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ChallengeParticipants.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChallengeParticipantUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ChallengeParticipants
   * const challengeParticipant = await prisma.challengeParticipant.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ChallengeParticipantUpdateManyArgs>(args: Prisma.SelectSubset<T, ChallengeParticipantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ChallengeParticipants and returns the data updated in the database.
   * @param {ChallengeParticipantUpdateManyAndReturnArgs} args - Arguments to update many ChallengeParticipants.
   * @example
   * // Update many ChallengeParticipants
   * const challengeParticipant = await prisma.challengeParticipant.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ChallengeParticipants and only return the `id`
   * const challengeParticipantWithIdOnly = await prisma.challengeParticipant.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ChallengeParticipantUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ChallengeParticipantUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChallengeParticipantPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ChallengeParticipant.
   * @param {ChallengeParticipantUpsertArgs} args - Arguments to update or create a ChallengeParticipant.
   * @example
   * // Update or create a ChallengeParticipant
   * const challengeParticipant = await prisma.challengeParticipant.upsert({
   *   create: {
   *     // ... data to create a ChallengeParticipant
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ChallengeParticipant we want to update
   *   }
   * })
   */
  upsert<T extends ChallengeParticipantUpsertArgs>(args: Prisma.SelectSubset<T, ChallengeParticipantUpsertArgs<ExtArgs>>): Prisma.Prisma__ChallengeParticipantClient<runtime.Types.Result.GetResult<Prisma.$ChallengeParticipantPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ChallengeParticipants.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChallengeParticipantCountArgs} args - Arguments to filter ChallengeParticipants to count.
   * @example
   * // Count the number of ChallengeParticipants
   * const count = await prisma.challengeParticipant.count({
   *   where: {
   *     // ... the filter for the ChallengeParticipants we want to count
   *   }
   * })
  **/
  count<T extends ChallengeParticipantCountArgs>(
    args?: Prisma.Subset<T, ChallengeParticipantCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ChallengeParticipantCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ChallengeParticipant.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChallengeParticipantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ChallengeParticipantAggregateArgs>(args: Prisma.Subset<T, ChallengeParticipantAggregateArgs>): Prisma.PrismaPromise<GetChallengeParticipantAggregateType<T>>

  /**
   * Group by ChallengeParticipant.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChallengeParticipantGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ChallengeParticipantGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ChallengeParticipantGroupByArgs['orderBy'] }
      : { orderBy?: ChallengeParticipantGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ChallengeParticipantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChallengeParticipantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ChallengeParticipant model
 */
readonly fields: ChallengeParticipantFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ChallengeParticipant.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ChallengeParticipantClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  challenge<T extends Prisma.ChallengeDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ChallengeDefaultArgs<ExtArgs>>): Prisma.Prisma__ChallengeClient<runtime.Types.Result.GetResult<Prisma.$ChallengePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  user<T extends Prisma.ChallengeParticipant$userArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ChallengeParticipant$userArgs<ExtArgs>>): Prisma.Prisma__ProfileClient<runtime.Types.Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  team<T extends Prisma.ChallengeParticipant$teamArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ChallengeParticipant$teamArgs<ExtArgs>>): Prisma.Prisma__TeamClient<runtime.Types.Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  activities<T extends Prisma.ChallengeParticipant$activitiesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ChallengeParticipant$activitiesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  posts<T extends Prisma.ChallengeParticipant$postsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ChallengeParticipant$postsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ChallengeParticipant model
 */
export interface ChallengeParticipantFieldRefs {
  readonly id: Prisma.FieldRef<"ChallengeParticipant", 'String'>
  readonly challengeId: Prisma.FieldRef<"ChallengeParticipant", 'String'>
  readonly userId: Prisma.FieldRef<"ChallengeParticipant", 'String'>
  readonly teamId: Prisma.FieldRef<"ChallengeParticipant", 'String'>
  readonly joinedAt: Prisma.FieldRef<"ChallengeParticipant", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ChallengeParticipant findUnique
 */
export type ChallengeParticipantFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChallengeParticipant
   */
  select?: Prisma.ChallengeParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChallengeParticipant
   */
  omit?: Prisma.ChallengeParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChallengeParticipantInclude<ExtArgs> | null
  /**
   * Filter, which ChallengeParticipant to fetch.
   */
  where: Prisma.ChallengeParticipantWhereUniqueInput
}

/**
 * ChallengeParticipant findUniqueOrThrow
 */
export type ChallengeParticipantFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChallengeParticipant
   */
  select?: Prisma.ChallengeParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChallengeParticipant
   */
  omit?: Prisma.ChallengeParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChallengeParticipantInclude<ExtArgs> | null
  /**
   * Filter, which ChallengeParticipant to fetch.
   */
  where: Prisma.ChallengeParticipantWhereUniqueInput
}

/**
 * ChallengeParticipant findFirst
 */
export type ChallengeParticipantFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChallengeParticipant
   */
  select?: Prisma.ChallengeParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChallengeParticipant
   */
  omit?: Prisma.ChallengeParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChallengeParticipantInclude<ExtArgs> | null
  /**
   * Filter, which ChallengeParticipant to fetch.
   */
  where?: Prisma.ChallengeParticipantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChallengeParticipants to fetch.
   */
  orderBy?: Prisma.ChallengeParticipantOrderByWithRelationInput | Prisma.ChallengeParticipantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ChallengeParticipants.
   */
  cursor?: Prisma.ChallengeParticipantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChallengeParticipants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChallengeParticipants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ChallengeParticipants.
   */
  distinct?: Prisma.ChallengeParticipantScalarFieldEnum | Prisma.ChallengeParticipantScalarFieldEnum[]
}

/**
 * ChallengeParticipant findFirstOrThrow
 */
export type ChallengeParticipantFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChallengeParticipant
   */
  select?: Prisma.ChallengeParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChallengeParticipant
   */
  omit?: Prisma.ChallengeParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChallengeParticipantInclude<ExtArgs> | null
  /**
   * Filter, which ChallengeParticipant to fetch.
   */
  where?: Prisma.ChallengeParticipantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChallengeParticipants to fetch.
   */
  orderBy?: Prisma.ChallengeParticipantOrderByWithRelationInput | Prisma.ChallengeParticipantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ChallengeParticipants.
   */
  cursor?: Prisma.ChallengeParticipantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChallengeParticipants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChallengeParticipants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ChallengeParticipants.
   */
  distinct?: Prisma.ChallengeParticipantScalarFieldEnum | Prisma.ChallengeParticipantScalarFieldEnum[]
}

/**
 * ChallengeParticipant findMany
 */
export type ChallengeParticipantFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChallengeParticipant
   */
  select?: Prisma.ChallengeParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChallengeParticipant
   */
  omit?: Prisma.ChallengeParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChallengeParticipantInclude<ExtArgs> | null
  /**
   * Filter, which ChallengeParticipants to fetch.
   */
  where?: Prisma.ChallengeParticipantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChallengeParticipants to fetch.
   */
  orderBy?: Prisma.ChallengeParticipantOrderByWithRelationInput | Prisma.ChallengeParticipantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ChallengeParticipants.
   */
  cursor?: Prisma.ChallengeParticipantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChallengeParticipants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChallengeParticipants.
   */
  skip?: number
  distinct?: Prisma.ChallengeParticipantScalarFieldEnum | Prisma.ChallengeParticipantScalarFieldEnum[]
}

/**
 * ChallengeParticipant create
 */
export type ChallengeParticipantCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChallengeParticipant
   */
  select?: Prisma.ChallengeParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChallengeParticipant
   */
  omit?: Prisma.ChallengeParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChallengeParticipantInclude<ExtArgs> | null
  /**
   * The data needed to create a ChallengeParticipant.
   */
  data: Prisma.XOR<Prisma.ChallengeParticipantCreateInput, Prisma.ChallengeParticipantUncheckedCreateInput>
}

/**
 * ChallengeParticipant createMany
 */
export type ChallengeParticipantCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ChallengeParticipants.
   */
  data: Prisma.ChallengeParticipantCreateManyInput | Prisma.ChallengeParticipantCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ChallengeParticipant createManyAndReturn
 */
export type ChallengeParticipantCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChallengeParticipant
   */
  select?: Prisma.ChallengeParticipantSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ChallengeParticipant
   */
  omit?: Prisma.ChallengeParticipantOmit<ExtArgs> | null
  /**
   * The data used to create many ChallengeParticipants.
   */
  data: Prisma.ChallengeParticipantCreateManyInput | Prisma.ChallengeParticipantCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChallengeParticipantIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ChallengeParticipant update
 */
export type ChallengeParticipantUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChallengeParticipant
   */
  select?: Prisma.ChallengeParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChallengeParticipant
   */
  omit?: Prisma.ChallengeParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChallengeParticipantInclude<ExtArgs> | null
  /**
   * The data needed to update a ChallengeParticipant.
   */
  data: Prisma.XOR<Prisma.ChallengeParticipantUpdateInput, Prisma.ChallengeParticipantUncheckedUpdateInput>
  /**
   * Choose, which ChallengeParticipant to update.
   */
  where: Prisma.ChallengeParticipantWhereUniqueInput
}

/**
 * ChallengeParticipant updateMany
 */
export type ChallengeParticipantUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ChallengeParticipants.
   */
  data: Prisma.XOR<Prisma.ChallengeParticipantUpdateManyMutationInput, Prisma.ChallengeParticipantUncheckedUpdateManyInput>
  /**
   * Filter which ChallengeParticipants to update
   */
  where?: Prisma.ChallengeParticipantWhereInput
  /**
   * Limit how many ChallengeParticipants to update.
   */
  limit?: number
}

/**
 * ChallengeParticipant updateManyAndReturn
 */
export type ChallengeParticipantUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChallengeParticipant
   */
  select?: Prisma.ChallengeParticipantSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ChallengeParticipant
   */
  omit?: Prisma.ChallengeParticipantOmit<ExtArgs> | null
  /**
   * The data used to update ChallengeParticipants.
   */
  data: Prisma.XOR<Prisma.ChallengeParticipantUpdateManyMutationInput, Prisma.ChallengeParticipantUncheckedUpdateManyInput>
  /**
   * Filter which ChallengeParticipants to update
   */
  where?: Prisma.ChallengeParticipantWhereInput
  /**
   * Limit how many ChallengeParticipants to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChallengeParticipantIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ChallengeParticipant upsert
 */
export type ChallengeParticipantUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChallengeParticipant
   */
  select?: Prisma.ChallengeParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChallengeParticipant
   */
  omit?: Prisma.ChallengeParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChallengeParticipantInclude<ExtArgs> | null
  /**
   * The filter to search for the ChallengeParticipant to update in case it exists.
   */
  where: Prisma.ChallengeParticipantWhereUniqueInput
  /**
   * In case the ChallengeParticipant found by the `where` argument doesn't exist, create a new ChallengeParticipant with this data.
   */
  create: Prisma.XOR<Prisma.ChallengeParticipantCreateInput, Prisma.ChallengeParticipantUncheckedCreateInput>
  /**
   * In case the ChallengeParticipant was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ChallengeParticipantUpdateInput, Prisma.ChallengeParticipantUncheckedUpdateInput>
}

/**
 * ChallengeParticipant delete
 */
export type ChallengeParticipantDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChallengeParticipant
   */
  select?: Prisma.ChallengeParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChallengeParticipant
   */
  omit?: Prisma.ChallengeParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChallengeParticipantInclude<ExtArgs> | null
  /**
   * Filter which ChallengeParticipant to delete.
   */
  where: Prisma.ChallengeParticipantWhereUniqueInput
}

/**
 * ChallengeParticipant deleteMany
 */
export type ChallengeParticipantDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ChallengeParticipants to delete
   */
  where?: Prisma.ChallengeParticipantWhereInput
  /**
   * Limit how many ChallengeParticipants to delete.
   */
  limit?: number
}

/**
 * ChallengeParticipant.user
 */
export type ChallengeParticipant$userArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Profile
   */
  select?: Prisma.ProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Profile
   */
  omit?: Prisma.ProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfileInclude<ExtArgs> | null
  where?: Prisma.ProfileWhereInput
}

/**
 * ChallengeParticipant.team
 */
export type ChallengeParticipant$teamArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Team
   */
  select?: Prisma.TeamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Team
   */
  omit?: Prisma.TeamOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamInclude<ExtArgs> | null
  where?: Prisma.TeamWhereInput
}

/**
 * ChallengeParticipant.activities
 */
export type ChallengeParticipant$activitiesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Activity
   */
  select?: Prisma.ActivitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Activity
   */
  omit?: Prisma.ActivityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActivityInclude<ExtArgs> | null
  where?: Prisma.ActivityWhereInput
  orderBy?: Prisma.ActivityOrderByWithRelationInput | Prisma.ActivityOrderByWithRelationInput[]
  cursor?: Prisma.ActivityWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ActivityScalarFieldEnum | Prisma.ActivityScalarFieldEnum[]
}

/**
 * ChallengeParticipant.posts
 */
export type ChallengeParticipant$postsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Post
   */
  select?: Prisma.PostSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Post
   */
  omit?: Prisma.PostOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostInclude<ExtArgs> | null
  where?: Prisma.PostWhereInput
  orderBy?: Prisma.PostOrderByWithRelationInput | Prisma.PostOrderByWithRelationInput[]
  cursor?: Prisma.PostWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PostScalarFieldEnum | Prisma.PostScalarFieldEnum[]
}

/**
 * ChallengeParticipant without action
 */
export type ChallengeParticipantDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChallengeParticipant
   */
  select?: Prisma.ChallengeParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChallengeParticipant
   */
  omit?: Prisma.ChallengeParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChallengeParticipantInclude<ExtArgs> | null
}
