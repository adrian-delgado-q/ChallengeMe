
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `TeamMembership` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model TeamMembership
 * 
 */
export type TeamMembershipModel = runtime.Types.Result.DefaultSelection<Prisma.$TeamMembershipPayload>

export type AggregateTeamMembership = {
  _count: TeamMembershipCountAggregateOutputType | null
  _min: TeamMembershipMinAggregateOutputType | null
  _max: TeamMembershipMaxAggregateOutputType | null
}

export type TeamMembershipMinAggregateOutputType = {
  id: string | null
  teamId: string | null
  userId: string | null
  role: $Enums.TeamRole | null
  joinedAt: Date | null
  expiresAt: Date | null
}

export type TeamMembershipMaxAggregateOutputType = {
  id: string | null
  teamId: string | null
  userId: string | null
  role: $Enums.TeamRole | null
  joinedAt: Date | null
  expiresAt: Date | null
}

export type TeamMembershipCountAggregateOutputType = {
  id: number
  teamId: number
  userId: number
  role: number
  joinedAt: number
  expiresAt: number
  _all: number
}


export type TeamMembershipMinAggregateInputType = {
  id?: true
  teamId?: true
  userId?: true
  role?: true
  joinedAt?: true
  expiresAt?: true
}

export type TeamMembershipMaxAggregateInputType = {
  id?: true
  teamId?: true
  userId?: true
  role?: true
  joinedAt?: true
  expiresAt?: true
}

export type TeamMembershipCountAggregateInputType = {
  id?: true
  teamId?: true
  userId?: true
  role?: true
  joinedAt?: true
  expiresAt?: true
  _all?: true
}

export type TeamMembershipAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TeamMembership to aggregate.
   */
  where?: Prisma.TeamMembershipWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TeamMemberships to fetch.
   */
  orderBy?: Prisma.TeamMembershipOrderByWithRelationInput | Prisma.TeamMembershipOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TeamMembershipWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TeamMemberships from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TeamMemberships.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TeamMemberships
  **/
  _count?: true | TeamMembershipCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TeamMembershipMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TeamMembershipMaxAggregateInputType
}

export type GetTeamMembershipAggregateType<T extends TeamMembershipAggregateArgs> = {
      [P in keyof T & keyof AggregateTeamMembership]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTeamMembership[P]>
    : Prisma.GetScalarType<T[P], AggregateTeamMembership[P]>
}




export type TeamMembershipGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TeamMembershipWhereInput
  orderBy?: Prisma.TeamMembershipOrderByWithAggregationInput | Prisma.TeamMembershipOrderByWithAggregationInput[]
  by: Prisma.TeamMembershipScalarFieldEnum[] | Prisma.TeamMembershipScalarFieldEnum
  having?: Prisma.TeamMembershipScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TeamMembershipCountAggregateInputType | true
  _min?: TeamMembershipMinAggregateInputType
  _max?: TeamMembershipMaxAggregateInputType
}

export type TeamMembershipGroupByOutputType = {
  id: string
  teamId: string
  userId: string
  role: $Enums.TeamRole
  joinedAt: Date
  expiresAt: Date | null
  _count: TeamMembershipCountAggregateOutputType | null
  _min: TeamMembershipMinAggregateOutputType | null
  _max: TeamMembershipMaxAggregateOutputType | null
}

type GetTeamMembershipGroupByPayload<T extends TeamMembershipGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TeamMembershipGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TeamMembershipGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TeamMembershipGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TeamMembershipGroupByOutputType[P]>
      }
    >
  > 



export type TeamMembershipWhereInput = {
  AND?: Prisma.TeamMembershipWhereInput | Prisma.TeamMembershipWhereInput[]
  OR?: Prisma.TeamMembershipWhereInput[]
  NOT?: Prisma.TeamMembershipWhereInput | Prisma.TeamMembershipWhereInput[]
  id?: Prisma.UuidFilter<"TeamMembership"> | string
  teamId?: Prisma.UuidFilter<"TeamMembership"> | string
  userId?: Prisma.UuidFilter<"TeamMembership"> | string
  role?: Prisma.EnumTeamRoleFilter<"TeamMembership"> | $Enums.TeamRole
  joinedAt?: Prisma.DateTimeFilter<"TeamMembership"> | Date | string
  expiresAt?: Prisma.DateTimeNullableFilter<"TeamMembership"> | Date | string | null
  team?: Prisma.XOR<Prisma.TeamScalarRelationFilter, Prisma.TeamWhereInput>
  user?: Prisma.XOR<Prisma.ProfileScalarRelationFilter, Prisma.ProfileWhereInput>
}

export type TeamMembershipOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  teamId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  joinedAt?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrderInput | Prisma.SortOrder
  team?: Prisma.TeamOrderByWithRelationInput
  user?: Prisma.ProfileOrderByWithRelationInput
}

export type TeamMembershipWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  teamId_userId?: Prisma.TeamMembershipTeamIdUserIdCompoundUniqueInput
  AND?: Prisma.TeamMembershipWhereInput | Prisma.TeamMembershipWhereInput[]
  OR?: Prisma.TeamMembershipWhereInput[]
  NOT?: Prisma.TeamMembershipWhereInput | Prisma.TeamMembershipWhereInput[]
  teamId?: Prisma.UuidFilter<"TeamMembership"> | string
  userId?: Prisma.UuidFilter<"TeamMembership"> | string
  role?: Prisma.EnumTeamRoleFilter<"TeamMembership"> | $Enums.TeamRole
  joinedAt?: Prisma.DateTimeFilter<"TeamMembership"> | Date | string
  expiresAt?: Prisma.DateTimeNullableFilter<"TeamMembership"> | Date | string | null
  team?: Prisma.XOR<Prisma.TeamScalarRelationFilter, Prisma.TeamWhereInput>
  user?: Prisma.XOR<Prisma.ProfileScalarRelationFilter, Prisma.ProfileWhereInput>
}, "id" | "teamId_userId">

export type TeamMembershipOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  teamId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  joinedAt?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.TeamMembershipCountOrderByAggregateInput
  _max?: Prisma.TeamMembershipMaxOrderByAggregateInput
  _min?: Prisma.TeamMembershipMinOrderByAggregateInput
}

export type TeamMembershipScalarWhereWithAggregatesInput = {
  AND?: Prisma.TeamMembershipScalarWhereWithAggregatesInput | Prisma.TeamMembershipScalarWhereWithAggregatesInput[]
  OR?: Prisma.TeamMembershipScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TeamMembershipScalarWhereWithAggregatesInput | Prisma.TeamMembershipScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"TeamMembership"> | string
  teamId?: Prisma.UuidWithAggregatesFilter<"TeamMembership"> | string
  userId?: Prisma.UuidWithAggregatesFilter<"TeamMembership"> | string
  role?: Prisma.EnumTeamRoleWithAggregatesFilter<"TeamMembership"> | $Enums.TeamRole
  joinedAt?: Prisma.DateTimeWithAggregatesFilter<"TeamMembership"> | Date | string
  expiresAt?: Prisma.DateTimeNullableWithAggregatesFilter<"TeamMembership"> | Date | string | null
}

export type TeamMembershipCreateInput = {
  id?: string
  role?: $Enums.TeamRole
  joinedAt?: Date | string
  expiresAt?: Date | string | null
  team: Prisma.TeamCreateNestedOneWithoutTeamMembershipsInput
  user: Prisma.ProfileCreateNestedOneWithoutTeamMembershipsInput
}

export type TeamMembershipUncheckedCreateInput = {
  id?: string
  teamId: string
  userId: string
  role?: $Enums.TeamRole
  joinedAt?: Date | string
  expiresAt?: Date | string | null
}

export type TeamMembershipUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumTeamRoleFieldUpdateOperationsInput | $Enums.TeamRole
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  team?: Prisma.TeamUpdateOneRequiredWithoutTeamMembershipsNestedInput
  user?: Prisma.ProfileUpdateOneRequiredWithoutTeamMembershipsNestedInput
}

export type TeamMembershipUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  teamId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumTeamRoleFieldUpdateOperationsInput | $Enums.TeamRole
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type TeamMembershipCreateManyInput = {
  id?: string
  teamId: string
  userId: string
  role?: $Enums.TeamRole
  joinedAt?: Date | string
  expiresAt?: Date | string | null
}

export type TeamMembershipUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumTeamRoleFieldUpdateOperationsInput | $Enums.TeamRole
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type TeamMembershipUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  teamId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumTeamRoleFieldUpdateOperationsInput | $Enums.TeamRole
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type TeamMembershipListRelationFilter = {
  every?: Prisma.TeamMembershipWhereInput
  some?: Prisma.TeamMembershipWhereInput
  none?: Prisma.TeamMembershipWhereInput
}

export type TeamMembershipOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TeamMembershipTeamIdUserIdCompoundUniqueInput = {
  teamId: string
  userId: string
}

export type TeamMembershipCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  teamId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  joinedAt?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
}

export type TeamMembershipMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  teamId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  joinedAt?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
}

export type TeamMembershipMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  teamId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  joinedAt?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
}

export type TeamMembershipCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.TeamMembershipCreateWithoutUserInput, Prisma.TeamMembershipUncheckedCreateWithoutUserInput> | Prisma.TeamMembershipCreateWithoutUserInput[] | Prisma.TeamMembershipUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.TeamMembershipCreateOrConnectWithoutUserInput | Prisma.TeamMembershipCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.TeamMembershipCreateManyUserInputEnvelope
  connect?: Prisma.TeamMembershipWhereUniqueInput | Prisma.TeamMembershipWhereUniqueInput[]
}

export type TeamMembershipUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.TeamMembershipCreateWithoutUserInput, Prisma.TeamMembershipUncheckedCreateWithoutUserInput> | Prisma.TeamMembershipCreateWithoutUserInput[] | Prisma.TeamMembershipUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.TeamMembershipCreateOrConnectWithoutUserInput | Prisma.TeamMembershipCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.TeamMembershipCreateManyUserInputEnvelope
  connect?: Prisma.TeamMembershipWhereUniqueInput | Prisma.TeamMembershipWhereUniqueInput[]
}

export type TeamMembershipUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.TeamMembershipCreateWithoutUserInput, Prisma.TeamMembershipUncheckedCreateWithoutUserInput> | Prisma.TeamMembershipCreateWithoutUserInput[] | Prisma.TeamMembershipUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.TeamMembershipCreateOrConnectWithoutUserInput | Prisma.TeamMembershipCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.TeamMembershipUpsertWithWhereUniqueWithoutUserInput | Prisma.TeamMembershipUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.TeamMembershipCreateManyUserInputEnvelope
  set?: Prisma.TeamMembershipWhereUniqueInput | Prisma.TeamMembershipWhereUniqueInput[]
  disconnect?: Prisma.TeamMembershipWhereUniqueInput | Prisma.TeamMembershipWhereUniqueInput[]
  delete?: Prisma.TeamMembershipWhereUniqueInput | Prisma.TeamMembershipWhereUniqueInput[]
  connect?: Prisma.TeamMembershipWhereUniqueInput | Prisma.TeamMembershipWhereUniqueInput[]
  update?: Prisma.TeamMembershipUpdateWithWhereUniqueWithoutUserInput | Prisma.TeamMembershipUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.TeamMembershipUpdateManyWithWhereWithoutUserInput | Prisma.TeamMembershipUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.TeamMembershipScalarWhereInput | Prisma.TeamMembershipScalarWhereInput[]
}

export type TeamMembershipUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.TeamMembershipCreateWithoutUserInput, Prisma.TeamMembershipUncheckedCreateWithoutUserInput> | Prisma.TeamMembershipCreateWithoutUserInput[] | Prisma.TeamMembershipUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.TeamMembershipCreateOrConnectWithoutUserInput | Prisma.TeamMembershipCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.TeamMembershipUpsertWithWhereUniqueWithoutUserInput | Prisma.TeamMembershipUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.TeamMembershipCreateManyUserInputEnvelope
  set?: Prisma.TeamMembershipWhereUniqueInput | Prisma.TeamMembershipWhereUniqueInput[]
  disconnect?: Prisma.TeamMembershipWhereUniqueInput | Prisma.TeamMembershipWhereUniqueInput[]
  delete?: Prisma.TeamMembershipWhereUniqueInput | Prisma.TeamMembershipWhereUniqueInput[]
  connect?: Prisma.TeamMembershipWhereUniqueInput | Prisma.TeamMembershipWhereUniqueInput[]
  update?: Prisma.TeamMembershipUpdateWithWhereUniqueWithoutUserInput | Prisma.TeamMembershipUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.TeamMembershipUpdateManyWithWhereWithoutUserInput | Prisma.TeamMembershipUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.TeamMembershipScalarWhereInput | Prisma.TeamMembershipScalarWhereInput[]
}

export type TeamMembershipCreateNestedManyWithoutTeamInput = {
  create?: Prisma.XOR<Prisma.TeamMembershipCreateWithoutTeamInput, Prisma.TeamMembershipUncheckedCreateWithoutTeamInput> | Prisma.TeamMembershipCreateWithoutTeamInput[] | Prisma.TeamMembershipUncheckedCreateWithoutTeamInput[]
  connectOrCreate?: Prisma.TeamMembershipCreateOrConnectWithoutTeamInput | Prisma.TeamMembershipCreateOrConnectWithoutTeamInput[]
  createMany?: Prisma.TeamMembershipCreateManyTeamInputEnvelope
  connect?: Prisma.TeamMembershipWhereUniqueInput | Prisma.TeamMembershipWhereUniqueInput[]
}

export type TeamMembershipUncheckedCreateNestedManyWithoutTeamInput = {
  create?: Prisma.XOR<Prisma.TeamMembershipCreateWithoutTeamInput, Prisma.TeamMembershipUncheckedCreateWithoutTeamInput> | Prisma.TeamMembershipCreateWithoutTeamInput[] | Prisma.TeamMembershipUncheckedCreateWithoutTeamInput[]
  connectOrCreate?: Prisma.TeamMembershipCreateOrConnectWithoutTeamInput | Prisma.TeamMembershipCreateOrConnectWithoutTeamInput[]
  createMany?: Prisma.TeamMembershipCreateManyTeamInputEnvelope
  connect?: Prisma.TeamMembershipWhereUniqueInput | Prisma.TeamMembershipWhereUniqueInput[]
}

export type TeamMembershipUpdateManyWithoutTeamNestedInput = {
  create?: Prisma.XOR<Prisma.TeamMembershipCreateWithoutTeamInput, Prisma.TeamMembershipUncheckedCreateWithoutTeamInput> | Prisma.TeamMembershipCreateWithoutTeamInput[] | Prisma.TeamMembershipUncheckedCreateWithoutTeamInput[]
  connectOrCreate?: Prisma.TeamMembershipCreateOrConnectWithoutTeamInput | Prisma.TeamMembershipCreateOrConnectWithoutTeamInput[]
  upsert?: Prisma.TeamMembershipUpsertWithWhereUniqueWithoutTeamInput | Prisma.TeamMembershipUpsertWithWhereUniqueWithoutTeamInput[]
  createMany?: Prisma.TeamMembershipCreateManyTeamInputEnvelope
  set?: Prisma.TeamMembershipWhereUniqueInput | Prisma.TeamMembershipWhereUniqueInput[]
  disconnect?: Prisma.TeamMembershipWhereUniqueInput | Prisma.TeamMembershipWhereUniqueInput[]
  delete?: Prisma.TeamMembershipWhereUniqueInput | Prisma.TeamMembershipWhereUniqueInput[]
  connect?: Prisma.TeamMembershipWhereUniqueInput | Prisma.TeamMembershipWhereUniqueInput[]
  update?: Prisma.TeamMembershipUpdateWithWhereUniqueWithoutTeamInput | Prisma.TeamMembershipUpdateWithWhereUniqueWithoutTeamInput[]
  updateMany?: Prisma.TeamMembershipUpdateManyWithWhereWithoutTeamInput | Prisma.TeamMembershipUpdateManyWithWhereWithoutTeamInput[]
  deleteMany?: Prisma.TeamMembershipScalarWhereInput | Prisma.TeamMembershipScalarWhereInput[]
}

export type TeamMembershipUncheckedUpdateManyWithoutTeamNestedInput = {
  create?: Prisma.XOR<Prisma.TeamMembershipCreateWithoutTeamInput, Prisma.TeamMembershipUncheckedCreateWithoutTeamInput> | Prisma.TeamMembershipCreateWithoutTeamInput[] | Prisma.TeamMembershipUncheckedCreateWithoutTeamInput[]
  connectOrCreate?: Prisma.TeamMembershipCreateOrConnectWithoutTeamInput | Prisma.TeamMembershipCreateOrConnectWithoutTeamInput[]
  upsert?: Prisma.TeamMembershipUpsertWithWhereUniqueWithoutTeamInput | Prisma.TeamMembershipUpsertWithWhereUniqueWithoutTeamInput[]
  createMany?: Prisma.TeamMembershipCreateManyTeamInputEnvelope
  set?: Prisma.TeamMembershipWhereUniqueInput | Prisma.TeamMembershipWhereUniqueInput[]
  disconnect?: Prisma.TeamMembershipWhereUniqueInput | Prisma.TeamMembershipWhereUniqueInput[]
  delete?: Prisma.TeamMembershipWhereUniqueInput | Prisma.TeamMembershipWhereUniqueInput[]
  connect?: Prisma.TeamMembershipWhereUniqueInput | Prisma.TeamMembershipWhereUniqueInput[]
  update?: Prisma.TeamMembershipUpdateWithWhereUniqueWithoutTeamInput | Prisma.TeamMembershipUpdateWithWhereUniqueWithoutTeamInput[]
  updateMany?: Prisma.TeamMembershipUpdateManyWithWhereWithoutTeamInput | Prisma.TeamMembershipUpdateManyWithWhereWithoutTeamInput[]
  deleteMany?: Prisma.TeamMembershipScalarWhereInput | Prisma.TeamMembershipScalarWhereInput[]
}

export type EnumTeamRoleFieldUpdateOperationsInput = {
  set?: $Enums.TeamRole
}

export type TeamMembershipCreateWithoutUserInput = {
  id?: string
  role?: $Enums.TeamRole
  joinedAt?: Date | string
  expiresAt?: Date | string | null
  team: Prisma.TeamCreateNestedOneWithoutTeamMembershipsInput
}

export type TeamMembershipUncheckedCreateWithoutUserInput = {
  id?: string
  teamId: string
  role?: $Enums.TeamRole
  joinedAt?: Date | string
  expiresAt?: Date | string | null
}

export type TeamMembershipCreateOrConnectWithoutUserInput = {
  where: Prisma.TeamMembershipWhereUniqueInput
  create: Prisma.XOR<Prisma.TeamMembershipCreateWithoutUserInput, Prisma.TeamMembershipUncheckedCreateWithoutUserInput>
}

export type TeamMembershipCreateManyUserInputEnvelope = {
  data: Prisma.TeamMembershipCreateManyUserInput | Prisma.TeamMembershipCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type TeamMembershipUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.TeamMembershipWhereUniqueInput
  update: Prisma.XOR<Prisma.TeamMembershipUpdateWithoutUserInput, Prisma.TeamMembershipUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.TeamMembershipCreateWithoutUserInput, Prisma.TeamMembershipUncheckedCreateWithoutUserInput>
}

export type TeamMembershipUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.TeamMembershipWhereUniqueInput
  data: Prisma.XOR<Prisma.TeamMembershipUpdateWithoutUserInput, Prisma.TeamMembershipUncheckedUpdateWithoutUserInput>
}

export type TeamMembershipUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.TeamMembershipScalarWhereInput
  data: Prisma.XOR<Prisma.TeamMembershipUpdateManyMutationInput, Prisma.TeamMembershipUncheckedUpdateManyWithoutUserInput>
}

export type TeamMembershipScalarWhereInput = {
  AND?: Prisma.TeamMembershipScalarWhereInput | Prisma.TeamMembershipScalarWhereInput[]
  OR?: Prisma.TeamMembershipScalarWhereInput[]
  NOT?: Prisma.TeamMembershipScalarWhereInput | Prisma.TeamMembershipScalarWhereInput[]
  id?: Prisma.UuidFilter<"TeamMembership"> | string
  teamId?: Prisma.UuidFilter<"TeamMembership"> | string
  userId?: Prisma.UuidFilter<"TeamMembership"> | string
  role?: Prisma.EnumTeamRoleFilter<"TeamMembership"> | $Enums.TeamRole
  joinedAt?: Prisma.DateTimeFilter<"TeamMembership"> | Date | string
  expiresAt?: Prisma.DateTimeNullableFilter<"TeamMembership"> | Date | string | null
}

export type TeamMembershipCreateWithoutTeamInput = {
  id?: string
  role?: $Enums.TeamRole
  joinedAt?: Date | string
  expiresAt?: Date | string | null
  user: Prisma.ProfileCreateNestedOneWithoutTeamMembershipsInput
}

export type TeamMembershipUncheckedCreateWithoutTeamInput = {
  id?: string
  userId: string
  role?: $Enums.TeamRole
  joinedAt?: Date | string
  expiresAt?: Date | string | null
}

export type TeamMembershipCreateOrConnectWithoutTeamInput = {
  where: Prisma.TeamMembershipWhereUniqueInput
  create: Prisma.XOR<Prisma.TeamMembershipCreateWithoutTeamInput, Prisma.TeamMembershipUncheckedCreateWithoutTeamInput>
}

export type TeamMembershipCreateManyTeamInputEnvelope = {
  data: Prisma.TeamMembershipCreateManyTeamInput | Prisma.TeamMembershipCreateManyTeamInput[]
  skipDuplicates?: boolean
}

export type TeamMembershipUpsertWithWhereUniqueWithoutTeamInput = {
  where: Prisma.TeamMembershipWhereUniqueInput
  update: Prisma.XOR<Prisma.TeamMembershipUpdateWithoutTeamInput, Prisma.TeamMembershipUncheckedUpdateWithoutTeamInput>
  create: Prisma.XOR<Prisma.TeamMembershipCreateWithoutTeamInput, Prisma.TeamMembershipUncheckedCreateWithoutTeamInput>
}

export type TeamMembershipUpdateWithWhereUniqueWithoutTeamInput = {
  where: Prisma.TeamMembershipWhereUniqueInput
  data: Prisma.XOR<Prisma.TeamMembershipUpdateWithoutTeamInput, Prisma.TeamMembershipUncheckedUpdateWithoutTeamInput>
}

export type TeamMembershipUpdateManyWithWhereWithoutTeamInput = {
  where: Prisma.TeamMembershipScalarWhereInput
  data: Prisma.XOR<Prisma.TeamMembershipUpdateManyMutationInput, Prisma.TeamMembershipUncheckedUpdateManyWithoutTeamInput>
}

export type TeamMembershipCreateManyUserInput = {
  id?: string
  teamId: string
  role?: $Enums.TeamRole
  joinedAt?: Date | string
  expiresAt?: Date | string | null
}

export type TeamMembershipUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumTeamRoleFieldUpdateOperationsInput | $Enums.TeamRole
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  team?: Prisma.TeamUpdateOneRequiredWithoutTeamMembershipsNestedInput
}

export type TeamMembershipUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  teamId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumTeamRoleFieldUpdateOperationsInput | $Enums.TeamRole
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type TeamMembershipUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  teamId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumTeamRoleFieldUpdateOperationsInput | $Enums.TeamRole
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type TeamMembershipCreateManyTeamInput = {
  id?: string
  userId: string
  role?: $Enums.TeamRole
  joinedAt?: Date | string
  expiresAt?: Date | string | null
}

export type TeamMembershipUpdateWithoutTeamInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumTeamRoleFieldUpdateOperationsInput | $Enums.TeamRole
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  user?: Prisma.ProfileUpdateOneRequiredWithoutTeamMembershipsNestedInput
}

export type TeamMembershipUncheckedUpdateWithoutTeamInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumTeamRoleFieldUpdateOperationsInput | $Enums.TeamRole
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type TeamMembershipUncheckedUpdateManyWithoutTeamInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumTeamRoleFieldUpdateOperationsInput | $Enums.TeamRole
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}



export type TeamMembershipSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  teamId?: boolean
  userId?: boolean
  role?: boolean
  joinedAt?: boolean
  expiresAt?: boolean
  team?: boolean | Prisma.TeamDefaultArgs<ExtArgs>
  user?: boolean | Prisma.ProfileDefaultArgs<ExtArgs>
}, ExtArgs["result"]["teamMembership"]>

export type TeamMembershipSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  teamId?: boolean
  userId?: boolean
  role?: boolean
  joinedAt?: boolean
  expiresAt?: boolean
  team?: boolean | Prisma.TeamDefaultArgs<ExtArgs>
  user?: boolean | Prisma.ProfileDefaultArgs<ExtArgs>
}, ExtArgs["result"]["teamMembership"]>

export type TeamMembershipSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  teamId?: boolean
  userId?: boolean
  role?: boolean
  joinedAt?: boolean
  expiresAt?: boolean
  team?: boolean | Prisma.TeamDefaultArgs<ExtArgs>
  user?: boolean | Prisma.ProfileDefaultArgs<ExtArgs>
}, ExtArgs["result"]["teamMembership"]>

export type TeamMembershipSelectScalar = {
  id?: boolean
  teamId?: boolean
  userId?: boolean
  role?: boolean
  joinedAt?: boolean
  expiresAt?: boolean
}

export type TeamMembershipOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "teamId" | "userId" | "role" | "joinedAt" | "expiresAt", ExtArgs["result"]["teamMembership"]>
export type TeamMembershipInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  team?: boolean | Prisma.TeamDefaultArgs<ExtArgs>
  user?: boolean | Prisma.ProfileDefaultArgs<ExtArgs>
}
export type TeamMembershipIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  team?: boolean | Prisma.TeamDefaultArgs<ExtArgs>
  user?: boolean | Prisma.ProfileDefaultArgs<ExtArgs>
}
export type TeamMembershipIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  team?: boolean | Prisma.TeamDefaultArgs<ExtArgs>
  user?: boolean | Prisma.ProfileDefaultArgs<ExtArgs>
}

export type $TeamMembershipPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TeamMembership"
  objects: {
    team: Prisma.$TeamPayload<ExtArgs>
    user: Prisma.$ProfilePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    teamId: string
    userId: string
    role: $Enums.TeamRole
    joinedAt: Date
    expiresAt: Date | null
  }, ExtArgs["result"]["teamMembership"]>
  composites: {}
}

export type TeamMembershipGetPayload<S extends boolean | null | undefined | TeamMembershipDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TeamMembershipPayload, S>

export type TeamMembershipCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TeamMembershipFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TeamMembershipCountAggregateInputType | true
  }

export interface TeamMembershipDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TeamMembership'], meta: { name: 'TeamMembership' } }
  /**
   * Find zero or one TeamMembership that matches the filter.
   * @param {TeamMembershipFindUniqueArgs} args - Arguments to find a TeamMembership
   * @example
   * // Get one TeamMembership
   * const teamMembership = await prisma.teamMembership.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TeamMembershipFindUniqueArgs>(args: Prisma.SelectSubset<T, TeamMembershipFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TeamMembershipClient<runtime.Types.Result.GetResult<Prisma.$TeamMembershipPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TeamMembership that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TeamMembershipFindUniqueOrThrowArgs} args - Arguments to find a TeamMembership
   * @example
   * // Get one TeamMembership
   * const teamMembership = await prisma.teamMembership.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TeamMembershipFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TeamMembershipFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TeamMembershipClient<runtime.Types.Result.GetResult<Prisma.$TeamMembershipPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TeamMembership that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeamMembershipFindFirstArgs} args - Arguments to find a TeamMembership
   * @example
   * // Get one TeamMembership
   * const teamMembership = await prisma.teamMembership.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TeamMembershipFindFirstArgs>(args?: Prisma.SelectSubset<T, TeamMembershipFindFirstArgs<ExtArgs>>): Prisma.Prisma__TeamMembershipClient<runtime.Types.Result.GetResult<Prisma.$TeamMembershipPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TeamMembership that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeamMembershipFindFirstOrThrowArgs} args - Arguments to find a TeamMembership
   * @example
   * // Get one TeamMembership
   * const teamMembership = await prisma.teamMembership.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TeamMembershipFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TeamMembershipFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TeamMembershipClient<runtime.Types.Result.GetResult<Prisma.$TeamMembershipPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TeamMemberships that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeamMembershipFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TeamMemberships
   * const teamMemberships = await prisma.teamMembership.findMany()
   * 
   * // Get first 10 TeamMemberships
   * const teamMemberships = await prisma.teamMembership.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const teamMembershipWithIdOnly = await prisma.teamMembership.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TeamMembershipFindManyArgs>(args?: Prisma.SelectSubset<T, TeamMembershipFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TeamMembershipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TeamMembership.
   * @param {TeamMembershipCreateArgs} args - Arguments to create a TeamMembership.
   * @example
   * // Create one TeamMembership
   * const TeamMembership = await prisma.teamMembership.create({
   *   data: {
   *     // ... data to create a TeamMembership
   *   }
   * })
   * 
   */
  create<T extends TeamMembershipCreateArgs>(args: Prisma.SelectSubset<T, TeamMembershipCreateArgs<ExtArgs>>): Prisma.Prisma__TeamMembershipClient<runtime.Types.Result.GetResult<Prisma.$TeamMembershipPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TeamMemberships.
   * @param {TeamMembershipCreateManyArgs} args - Arguments to create many TeamMemberships.
   * @example
   * // Create many TeamMemberships
   * const teamMembership = await prisma.teamMembership.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TeamMembershipCreateManyArgs>(args?: Prisma.SelectSubset<T, TeamMembershipCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TeamMemberships and returns the data saved in the database.
   * @param {TeamMembershipCreateManyAndReturnArgs} args - Arguments to create many TeamMemberships.
   * @example
   * // Create many TeamMemberships
   * const teamMembership = await prisma.teamMembership.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TeamMemberships and only return the `id`
   * const teamMembershipWithIdOnly = await prisma.teamMembership.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TeamMembershipCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TeamMembershipCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TeamMembershipPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TeamMembership.
   * @param {TeamMembershipDeleteArgs} args - Arguments to delete one TeamMembership.
   * @example
   * // Delete one TeamMembership
   * const TeamMembership = await prisma.teamMembership.delete({
   *   where: {
   *     // ... filter to delete one TeamMembership
   *   }
   * })
   * 
   */
  delete<T extends TeamMembershipDeleteArgs>(args: Prisma.SelectSubset<T, TeamMembershipDeleteArgs<ExtArgs>>): Prisma.Prisma__TeamMembershipClient<runtime.Types.Result.GetResult<Prisma.$TeamMembershipPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TeamMembership.
   * @param {TeamMembershipUpdateArgs} args - Arguments to update one TeamMembership.
   * @example
   * // Update one TeamMembership
   * const teamMembership = await prisma.teamMembership.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TeamMembershipUpdateArgs>(args: Prisma.SelectSubset<T, TeamMembershipUpdateArgs<ExtArgs>>): Prisma.Prisma__TeamMembershipClient<runtime.Types.Result.GetResult<Prisma.$TeamMembershipPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TeamMemberships.
   * @param {TeamMembershipDeleteManyArgs} args - Arguments to filter TeamMemberships to delete.
   * @example
   * // Delete a few TeamMemberships
   * const { count } = await prisma.teamMembership.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TeamMembershipDeleteManyArgs>(args?: Prisma.SelectSubset<T, TeamMembershipDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TeamMemberships.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeamMembershipUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TeamMemberships
   * const teamMembership = await prisma.teamMembership.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TeamMembershipUpdateManyArgs>(args: Prisma.SelectSubset<T, TeamMembershipUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TeamMemberships and returns the data updated in the database.
   * @param {TeamMembershipUpdateManyAndReturnArgs} args - Arguments to update many TeamMemberships.
   * @example
   * // Update many TeamMemberships
   * const teamMembership = await prisma.teamMembership.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TeamMemberships and only return the `id`
   * const teamMembershipWithIdOnly = await prisma.teamMembership.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TeamMembershipUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TeamMembershipUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TeamMembershipPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TeamMembership.
   * @param {TeamMembershipUpsertArgs} args - Arguments to update or create a TeamMembership.
   * @example
   * // Update or create a TeamMembership
   * const teamMembership = await prisma.teamMembership.upsert({
   *   create: {
   *     // ... data to create a TeamMembership
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TeamMembership we want to update
   *   }
   * })
   */
  upsert<T extends TeamMembershipUpsertArgs>(args: Prisma.SelectSubset<T, TeamMembershipUpsertArgs<ExtArgs>>): Prisma.Prisma__TeamMembershipClient<runtime.Types.Result.GetResult<Prisma.$TeamMembershipPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TeamMemberships.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeamMembershipCountArgs} args - Arguments to filter TeamMemberships to count.
   * @example
   * // Count the number of TeamMemberships
   * const count = await prisma.teamMembership.count({
   *   where: {
   *     // ... the filter for the TeamMemberships we want to count
   *   }
   * })
  **/
  count<T extends TeamMembershipCountArgs>(
    args?: Prisma.Subset<T, TeamMembershipCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TeamMembershipCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TeamMembership.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeamMembershipAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TeamMembershipAggregateArgs>(args: Prisma.Subset<T, TeamMembershipAggregateArgs>): Prisma.PrismaPromise<GetTeamMembershipAggregateType<T>>

  /**
   * Group by TeamMembership.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeamMembershipGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TeamMembershipGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TeamMembershipGroupByArgs['orderBy'] }
      : { orderBy?: TeamMembershipGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TeamMembershipGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamMembershipGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TeamMembership model
 */
readonly fields: TeamMembershipFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TeamMembership.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TeamMembershipClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  team<T extends Prisma.TeamDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TeamDefaultArgs<ExtArgs>>): Prisma.Prisma__TeamClient<runtime.Types.Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  user<T extends Prisma.ProfileDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProfileDefaultArgs<ExtArgs>>): Prisma.Prisma__ProfileClient<runtime.Types.Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TeamMembership model
 */
export interface TeamMembershipFieldRefs {
  readonly id: Prisma.FieldRef<"TeamMembership", 'String'>
  readonly teamId: Prisma.FieldRef<"TeamMembership", 'String'>
  readonly userId: Prisma.FieldRef<"TeamMembership", 'String'>
  readonly role: Prisma.FieldRef<"TeamMembership", 'TeamRole'>
  readonly joinedAt: Prisma.FieldRef<"TeamMembership", 'DateTime'>
  readonly expiresAt: Prisma.FieldRef<"TeamMembership", 'DateTime'>
}
    

// Custom InputTypes
/**
 * TeamMembership findUnique
 */
export type TeamMembershipFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeamMembership
   */
  select?: Prisma.TeamMembershipSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeamMembership
   */
  omit?: Prisma.TeamMembershipOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamMembershipInclude<ExtArgs> | null
  /**
   * Filter, which TeamMembership to fetch.
   */
  where: Prisma.TeamMembershipWhereUniqueInput
}

/**
 * TeamMembership findUniqueOrThrow
 */
export type TeamMembershipFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeamMembership
   */
  select?: Prisma.TeamMembershipSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeamMembership
   */
  omit?: Prisma.TeamMembershipOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamMembershipInclude<ExtArgs> | null
  /**
   * Filter, which TeamMembership to fetch.
   */
  where: Prisma.TeamMembershipWhereUniqueInput
}

/**
 * TeamMembership findFirst
 */
export type TeamMembershipFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeamMembership
   */
  select?: Prisma.TeamMembershipSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeamMembership
   */
  omit?: Prisma.TeamMembershipOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamMembershipInclude<ExtArgs> | null
  /**
   * Filter, which TeamMembership to fetch.
   */
  where?: Prisma.TeamMembershipWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TeamMemberships to fetch.
   */
  orderBy?: Prisma.TeamMembershipOrderByWithRelationInput | Prisma.TeamMembershipOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TeamMemberships.
   */
  cursor?: Prisma.TeamMembershipWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TeamMemberships from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TeamMemberships.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TeamMemberships.
   */
  distinct?: Prisma.TeamMembershipScalarFieldEnum | Prisma.TeamMembershipScalarFieldEnum[]
}

/**
 * TeamMembership findFirstOrThrow
 */
export type TeamMembershipFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeamMembership
   */
  select?: Prisma.TeamMembershipSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeamMembership
   */
  omit?: Prisma.TeamMembershipOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamMembershipInclude<ExtArgs> | null
  /**
   * Filter, which TeamMembership to fetch.
   */
  where?: Prisma.TeamMembershipWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TeamMemberships to fetch.
   */
  orderBy?: Prisma.TeamMembershipOrderByWithRelationInput | Prisma.TeamMembershipOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TeamMemberships.
   */
  cursor?: Prisma.TeamMembershipWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TeamMemberships from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TeamMemberships.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TeamMemberships.
   */
  distinct?: Prisma.TeamMembershipScalarFieldEnum | Prisma.TeamMembershipScalarFieldEnum[]
}

/**
 * TeamMembership findMany
 */
export type TeamMembershipFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeamMembership
   */
  select?: Prisma.TeamMembershipSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeamMembership
   */
  omit?: Prisma.TeamMembershipOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamMembershipInclude<ExtArgs> | null
  /**
   * Filter, which TeamMemberships to fetch.
   */
  where?: Prisma.TeamMembershipWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TeamMemberships to fetch.
   */
  orderBy?: Prisma.TeamMembershipOrderByWithRelationInput | Prisma.TeamMembershipOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TeamMemberships.
   */
  cursor?: Prisma.TeamMembershipWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TeamMemberships from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TeamMemberships.
   */
  skip?: number
  distinct?: Prisma.TeamMembershipScalarFieldEnum | Prisma.TeamMembershipScalarFieldEnum[]
}

/**
 * TeamMembership create
 */
export type TeamMembershipCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeamMembership
   */
  select?: Prisma.TeamMembershipSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeamMembership
   */
  omit?: Prisma.TeamMembershipOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamMembershipInclude<ExtArgs> | null
  /**
   * The data needed to create a TeamMembership.
   */
  data: Prisma.XOR<Prisma.TeamMembershipCreateInput, Prisma.TeamMembershipUncheckedCreateInput>
}

/**
 * TeamMembership createMany
 */
export type TeamMembershipCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TeamMemberships.
   */
  data: Prisma.TeamMembershipCreateManyInput | Prisma.TeamMembershipCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TeamMembership createManyAndReturn
 */
export type TeamMembershipCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeamMembership
   */
  select?: Prisma.TeamMembershipSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TeamMembership
   */
  omit?: Prisma.TeamMembershipOmit<ExtArgs> | null
  /**
   * The data used to create many TeamMemberships.
   */
  data: Prisma.TeamMembershipCreateManyInput | Prisma.TeamMembershipCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamMembershipIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * TeamMembership update
 */
export type TeamMembershipUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeamMembership
   */
  select?: Prisma.TeamMembershipSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeamMembership
   */
  omit?: Prisma.TeamMembershipOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamMembershipInclude<ExtArgs> | null
  /**
   * The data needed to update a TeamMembership.
   */
  data: Prisma.XOR<Prisma.TeamMembershipUpdateInput, Prisma.TeamMembershipUncheckedUpdateInput>
  /**
   * Choose, which TeamMembership to update.
   */
  where: Prisma.TeamMembershipWhereUniqueInput
}

/**
 * TeamMembership updateMany
 */
export type TeamMembershipUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TeamMemberships.
   */
  data: Prisma.XOR<Prisma.TeamMembershipUpdateManyMutationInput, Prisma.TeamMembershipUncheckedUpdateManyInput>
  /**
   * Filter which TeamMemberships to update
   */
  where?: Prisma.TeamMembershipWhereInput
  /**
   * Limit how many TeamMemberships to update.
   */
  limit?: number
}

/**
 * TeamMembership updateManyAndReturn
 */
export type TeamMembershipUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeamMembership
   */
  select?: Prisma.TeamMembershipSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TeamMembership
   */
  omit?: Prisma.TeamMembershipOmit<ExtArgs> | null
  /**
   * The data used to update TeamMemberships.
   */
  data: Prisma.XOR<Prisma.TeamMembershipUpdateManyMutationInput, Prisma.TeamMembershipUncheckedUpdateManyInput>
  /**
   * Filter which TeamMemberships to update
   */
  where?: Prisma.TeamMembershipWhereInput
  /**
   * Limit how many TeamMemberships to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamMembershipIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * TeamMembership upsert
 */
export type TeamMembershipUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeamMembership
   */
  select?: Prisma.TeamMembershipSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeamMembership
   */
  omit?: Prisma.TeamMembershipOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamMembershipInclude<ExtArgs> | null
  /**
   * The filter to search for the TeamMembership to update in case it exists.
   */
  where: Prisma.TeamMembershipWhereUniqueInput
  /**
   * In case the TeamMembership found by the `where` argument doesn't exist, create a new TeamMembership with this data.
   */
  create: Prisma.XOR<Prisma.TeamMembershipCreateInput, Prisma.TeamMembershipUncheckedCreateInput>
  /**
   * In case the TeamMembership was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TeamMembershipUpdateInput, Prisma.TeamMembershipUncheckedUpdateInput>
}

/**
 * TeamMembership delete
 */
export type TeamMembershipDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeamMembership
   */
  select?: Prisma.TeamMembershipSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeamMembership
   */
  omit?: Prisma.TeamMembershipOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamMembershipInclude<ExtArgs> | null
  /**
   * Filter which TeamMembership to delete.
   */
  where: Prisma.TeamMembershipWhereUniqueInput
}

/**
 * TeamMembership deleteMany
 */
export type TeamMembershipDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TeamMemberships to delete
   */
  where?: Prisma.TeamMembershipWhereInput
  /**
   * Limit how many TeamMemberships to delete.
   */
  limit?: number
}

/**
 * TeamMembership without action
 */
export type TeamMembershipDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeamMembership
   */
  select?: Prisma.TeamMembershipSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeamMembership
   */
  omit?: Prisma.TeamMembershipOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamMembershipInclude<ExtArgs> | null
}
