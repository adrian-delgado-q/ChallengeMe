generator client {
  provider        = "prisma-client-ts"
  output          = "./prisma-generated-client"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("SUPABASE_DB_URL")
  schemas  = ["public"]
}

// --- Enums ---
enum TeamRole {
  ADMIN
  MEMBER

  @@schema("public")
}

enum ChallengeParticipantType {
  INDIVIDUAL
  TEAM

  @@schema("public")
}

// --- Models ---

model Profile {
  id        String   @id @db.Uuid
  username  String?  @unique
  avatarUrl String?  @map("avatar_url")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  createdTeams      Team[]                 @relation("TeamCreator")
  teamMemberships   TeamMembership[]
  createdChallenges Challenge[]            @relation("ChallengeCreator")
  challengeEntries  ChallengeParticipant[]
  activities        Activity[]
  posts             Post[]
  comments          Comment[]

  @@map("profiles")
  @@schema("public")
}

model Team {
  id          String    @id @default(uuid()) @db.Uuid
  creatorId   String    @db.Uuid
  name        String
  description String?
  avatarUrl   String?
  isPublic    Boolean   @default(true)
  createdAt   DateTime  @default(now()) @db.Timestamptz(6)
  expiresAt   DateTime? @db.Timestamptz(6)

  creator          Profile                @relation("TeamCreator", fields: [creatorId], references: [id])
  teamMemberships  TeamMembership[]
  challengeEntries ChallengeParticipant[]

  @@schema("public")
}

model TeamMembership {
  id        String    @id @default(uuid()) @db.Uuid
  teamId    String    @db.Uuid
  userId    String    @db.Uuid
  role      TeamRole  @default(MEMBER)
  joinedAt  DateTime  @default(now()) @db.Timestamptz(6)
  expiresAt DateTime? @db.Timestamptz(6)

  team Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user Profile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@schema("public")
}

model Challenge {
  id              String                   @id @default(uuid()) @db.Uuid
  creatorId       String                   @db.Uuid
  title           String
  description     String?
  challengeType   ChallengeParticipantType @default(INDIVIDUAL)
  maxParticipants Int?
  startDate       DateTime                 @db.Date
  endDate         DateTime                 @db.Date
  isPublic        Boolean                  @default(true)
  createdAt       DateTime                 @default(now()) @db.Timestamptz(6)
  expiresAt       DateTime?                @db.Timestamptz(6)

  creator      Profile                @relation("ChallengeCreator", fields: [creatorId], references: [id])
  participants ChallengeParticipant[]
  activities   Activity[]
  posts        Post[]

  @@schema("public")
}

model ChallengeParticipant {
  id          String    @id @default(uuid()) @db.Uuid
  challengeId String    @db.Uuid
  userId      String?   @db.Uuid
  teamId      String?   @db.Uuid
  joinedAt    DateTime  @default(now()) @db.Timestamptz(6)

  challenge   Challenge  @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user        Profile?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  team        Team?      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  activities  Activity[]
  posts       Post[]

  @@schema("public")

  // While Prisma won't explicitly show the `WHERE` clause for partial indexes,
  // it's good practice to reflect the *existence* of these indexes using `@@index`.
  // Atlas handles the actual creation of the partial indexes.
  @@index([challengeId, userId], name: "idx_challengeparticipant_challengeid_userid_unique")
  @@index([challengeId, teamId], name: "idx_challengeparticipant_challengeid_teamid_unique")
}

model Activity {
  id            String   @id @default(uuid()) @db.Uuid
  participantId String   @db.Uuid
  notes         String?
  date          DateTime @db.Date
  uploadedAt    DateTime @default(now()) @db.Timestamptz(6)

  // The relationship to the participant is the single source of truth.
  // You can access the user and challenge via this relation, e.g., `activity.participant.user`.
  participant ChallengeParticipant @relation(fields: [participantId], references: [id], onDelete: Cascade)

  // NOTE: Redundant convenience relations to User (Profile) and Challenge have been removed
  // to simplify the schema and prevent data inconsistency.
  Profile     Profile?   @relation(fields: [profileId], references: [id])
  profileId   String?    @db.Uuid
  Challenge   Challenge? @relation(fields: [challengeId], references: [id])
  challengeId String?    @db.Uuid

  @@schema("public")
}

model Post {
  id            String    @id @default(uuid()) @db.Uuid
  participantId String    @db.Uuid
  content       String?
  imageUrl      String?
  createdAt     DateTime  @default(now()) @db.Timestamptz(6)
  comments      Comment[]

  // The relationship to the participant is the single source of truth.
  participant ChallengeParticipant @relation(fields: [participantId], references: [id], onDelete: Cascade)

  // NOTE: Redundant convenience relations to User (Profile) and Challenge have been removed.
  Profile     Profile?   @relation(fields: [profileId], references: [id])
  profileId   String?    @db.Uuid
  Challenge   Challenge? @relation(fields: [challengeId], references: [id])
  challengeId String?    @db.Uuid

  @@schema("public")
}

model Comment {
  id        String   @id @default(uuid()) @db.Uuid
  authorId  String   @db.Uuid
  postId    String   @db.Uuid
  content   String?
  createdAt DateTime @default(now()) @db.Timestamptz(6)

  author Profile @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post   Post    @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@schema("public")
}
